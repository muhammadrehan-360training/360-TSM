DECLARE @PROCTOR_USERNAME VARCHAR(50) --INPUT
DECLARE @PROCTOR_PASSWORD VARCHAR(50)--INPUT
DECLARE @VU360_USERNAME VARCHAR(50)--INPUT
DECLARE @STATUS VARCHAR(50)
DECLARE @LEARNER_ID BIGINT
DECLARE @COURSEAPPROVAL_ID BIGINT
DECLARE @CREDENDTIAL TABLE(ID BIGINT)
DECLARE @CREDENTIAL_ID BIGINT
DECLARE @COURSEAPPROVAL_APPROVEDCOURSENAME varchar(250)
DECLARE @COURSEAPPROVAL_COURSEAPPROVALNUMBER varchar(250)
DECLARE @COURSE_BUSSINESSKEY VARCHAR(250) -- BUSSINESSKEY
DECLARE @COURSE_ID BIGINT
DECLARE @PROCTOR_ID BIGINT
DECLARE @CREDENTIAL_PROCTOR_ID BIGINT
DECLARE @OFFICIALLICENSENAME VARCHAR(250)--INPUT
DECLARE @SHORTLICENSENAME VARCHAR(250)--INPUT
DECLARE @CUSTOMER_ID BIGINT
DECLARE @LMSROLE_ID BIGINT
DECLARE @LMSFEATURE_ID_PROFILE BIGINT
DECLARE @LMSFEATURE_ID_COMPLETIONS BIGINT
DECLARE @DISTRIBUTORLMSFEATURE_ID BIGINT
DECLARE @CUSTOMERLMSFEATURE_ID BIGINT
DECLARE @LMSROLELMSFEATURE_ID BIGINT
DECLARE @DISTRIBUTOR_ID BIGINT
DECLARE @LMSROLE_ALREADY_EXISTS BIT

---INPUT--------------------------
SET @PROCTOR_USERNAME ='20FebCustomer-User4@lms.com '--'
SET @PROCTOR_PASSWORD = '12345678'
set @VU360_USERNAME = '20FebCustomer-User4@lms.com'--Learner's username
set @OFFICIALLICENSENAME ='Test License Name' -- credentdial
set @SHORTLICENSENAME = 'TLN'-- credentdial
---INPUT--------------------------
SET @COURSE_ID = NULL
SET @STATUS = 'Active'
      BEGIN TRY                                                      
         BEGIN TRANSACTION  
----CHECK FOR MULTIPLE COURSES AGAINST SAME BUSSINESSKEY AND CHECK WITH BUSSINESS
--IF @COURSE_ID IS NULL
--	SET @COURSE_ID = (SELECT ID FROM COURSE WHERE BUSSINESSKEY=@COURSE_BUSSINESSKEY AND COURSESTATUS='Published')

--CHECK FOR MULTIPLE CREDENTIAL_ID AGAINST SAME INPUT

SET @CREDENTIAL_ID = (SELECT TOP 1 ID FROM CREDENTIAL C WHERE C.SHORTLICENSENAME=@SHORTLICENSENAME AND C.OFFICIALLICENSENAME= @OFFICIALLICENSENAME)
 
--INSERT INTO @CREDENDTIAL(ID)
--SELECT C.ID FROM COURSEAPPROVAL CA 
--INNER JOIN REGULATORYAPPROVAL_CREDENTIALCATEGORYREQUIREMENT RRCAT ON CA.ID=RRCAT.REGULATORYAPPROVAL_ID
--INNER JOIN CREDENTIALCATEGORYREQUIREMENT CCR ON RRCAT.CREDENTIALCATEGORYREQUIREMENT_ID = CCR.ID
--INNER JOIN CREDENTIALCATEGORY CC ON  CCR.CREDENTIALCATEGORY_ID = CC.ID
--INNER JOIN [CREDENTIAL] C ON CC.CREDENTIAL_ID = C.ID
--WHERE CA.COURSE_ID = @COURSE_ID AND CA.APPROVEDCOURSENAME=@COURSEAPPROVAL_APPROVEDCOURSENAME 
--AND CA.COURSEAPPROVALNUMBER=@COURSEAPPROVAL_COURSEAPPROVALNUMBER

--SET UP PROCTOR INFO
--HOPEFULLY THERE SHOULD OR CANNOT BE MULTIPLE LEARNER AGAINST 1 USER
SET @LEARNER_ID = (SELECT ID FROM VU360USER VU WHERE VU.USERNAME=@VU360_USERNAME)

--CHECK FOR EXISTENT PROCTOR USERNAME

--INSERT PROCTOR INTO   VU360_SEQ TABLE            

UPDATE  VU360_SEQ WITH ( UPDLOCK )            
SET     Next_Id = ISNULL(@PROCTOR_ID, 0) + 1,            
        @PROCTOR_ID = Next_Id            
WHERE   Table_Name = 'PROCTOR' 
 
INSERT INTO PROCTOR(ID,VU360USER_ID,USERNAME,PASSWORD,STATUS)VALUES(@PROCTOR_ID,@LEARNER_ID,@PROCTOR_USERNAME,@PROCTOR_PASSWORD,@STATUS)


 PRINT @LEARNER_ID;
-- check if a proctor role is already defined at the customer level. 
SET @CUSTOMER_ID = (SELECT CUSTOMER_ID FROM LEARNER WHERE VU360USER_ID = @LEARNER_ID)

SET @DISTRIBUTOR_ID = (SELECT DISTRIBUTOR_ID FROM CUSTOMER WHERE ID = @CUSTOMER_ID)

SET @LMSROLE_ALREADY_EXISTS = 1

-- If already defined use that role
SET @LMSROLE_ID = (SELECT ID FROM LMSROLE WHERE CUSTOMER_ID = @CUSTOMER_ID AND ROLE_TYPE = 'ROLE_PROCTOR' AND ROLENAME = 'PROCTOR')

-- else create a new proctor role for this customer
IF @LMSROLE_ID IS NULL 
BEGIN

	SET @LMSROLE_ALREADY_EXISTS = 0

	UPDATE  VU360_SEQ WITH ( UPDLOCK )            
	SET     Next_Id = ISNULL(@LMSROLE_ID, 0) + 1,            
			@LMSROLE_ID = Next_Id            
	WHERE   Table_Name = 'LMSROLE' 

	INSERT INTO LMSROLE (ID, CUSTOMER_ID, ROLE_TYPE, ROLENAME, SYSTEMCREATEDTF, DEFAULTFORREGISTRATIONTF) VALUES (@LMSROLE_ID, @CUSTOMER_ID, 'ROLE_PROCTOR', 'PROCTOR', 0, 0)

END

-- Assign the proctor role to this user
INSERT INTO VU360USER_ROLE (USER_ID, ROLE_ID) VALUES (@LEARNER_ID, @LMSROLE_ID)

-- Assign permission of proctor feature 'Profile' at distributor level if not exists

SET @LMSFEATURE_ID_PROFILE = (SELECT ID FROM LMSFEATURE WHERE FEATURECODE = 'LMS-PTR-0001')

SET @DISTRIBUTORLMSFEATURE_ID = (SELECT ID FROM DISTRIBUTORLMSFEATURE WHERE LMSFEATURE_ID = @LMSFEATURE_ID_PROFILE AND DISTRIBUTOR_ID = @DISTRIBUTOR_ID)

IF @DISTRIBUTORLMSFEATURE_ID IS NULL
BEGIN

	UPDATE  VU360_SEQ WITH ( UPDLOCK )            
	SET     Next_Id = ISNULL(@DISTRIBUTORLMSFEATURE_ID, 0) + 1,            
			@DISTRIBUTORLMSFEATURE_ID = Next_Id            
	WHERE   Table_Name = 'DISTRIBUTORLMSFEATURE' 

	INSERT INTO DISTRIBUTORLMSFEATURE (ID, DISTRIBUTOR_ID, LMSFEATURE_ID, ENABLEDTF) VALUES (@DISTRIBUTORLMSFEATURE_ID, @DISTRIBUTOR_ID, @LMSFEATURE_ID_PROFILE, 1)

END

-- assign permission of proctor feature 'Completions' at distributor level if not exists

SET @LMSFEATURE_ID_COMPLETIONS = (SELECT ID FROM LMSFEATURE WHERE FEATURECODE = 'LMS-PTR-0002')

SET @DISTRIBUTORLMSFEATURE_ID = (SELECT ID FROM DISTRIBUTORLMSFEATURE WHERE LMSFEATURE_ID = @LMSFEATURE_ID_COMPLETIONS AND DISTRIBUTOR_ID = @DISTRIBUTOR_ID)

IF @DISTRIBUTORLMSFEATURE_ID IS NULL
BEGIN

	UPDATE  VU360_SEQ WITH ( UPDLOCK )            
	SET     Next_Id = ISNULL(@DISTRIBUTORLMSFEATURE_ID, 0) + 1,            
			@DISTRIBUTORLMSFEATURE_ID = Next_Id            
	WHERE   Table_Name = 'DISTRIBUTORLMSFEATURE' 

	INSERT INTO DISTRIBUTORLMSFEATURE (ID, DISTRIBUTOR_ID, LMSFEATURE_ID, ENABLEDTF) VALUES (@DISTRIBUTORLMSFEATURE_ID, @DISTRIBUTOR_ID, @LMSFEATURE_ID_COMPLETIONS, 1)

END

-- assign permission of proctor feature 'Profile' at customer level if not exists

SET @CUSTOMERLMSFEATURE_ID = (SELECT ID FROM CUSTOMERLMSFEATURE WHERE LMSFEATURE_ID = @LMSFEATURE_ID_PROFILE AND CUSTOMER_ID = @CUSTOMER_ID)

IF @CUSTOMERLMSFEATURE_ID IS NULL
BEGIN

	UPDATE  VU360_SEQ WITH ( UPDLOCK )            
	SET     Next_Id = ISNULL(@CUSTOMERLMSFEATURE_ID, 0) + 1,            
			@CUSTOMERLMSFEATURE_ID = Next_Id            
	WHERE   Table_Name = 'CUSTOMERLMSFEATURE' 

	INSERT INTO CUSTOMERLMSFEATURE (ID, CUSTOMER_ID, LMSFEATURE_ID, ENABLEDTF) VALUES (@CUSTOMERLMSFEATURE_ID, @CUSTOMER_ID, @LMSFEATURE_ID_PROFILE, 1)

END

-- assign permission of proctor feature 'Completions' at customer level if not exists

SET @CUSTOMERLMSFEATURE_ID = (SELECT ID FROM CUSTOMERLMSFEATURE WHERE LMSFEATURE_ID = @LMSFEATURE_ID_COMPLETIONS AND CUSTOMER_ID = @CUSTOMER_ID)

IF @CUSTOMERLMSFEATURE_ID IS NULL
BEGIN

	UPDATE  VU360_SEQ WITH ( UPDLOCK )            
	SET     Next_Id = ISNULL(@CUSTOMERLMSFEATURE_ID, 0) + 1,            
			@CUSTOMERLMSFEATURE_ID = Next_Id            
	WHERE   Table_Name = 'CUSTOMERLMSFEATURE' 

	INSERT INTO CUSTOMERLMSFEATURE (ID, CUSTOMER_ID, LMSFEATURE_ID, ENABLEDTF) VALUES (@CUSTOMERLMSFEATURE_ID, @CUSTOMER_ID, @LMSFEATURE_ID_COMPLETIONS, 1)

END

-- assign permission of proctor feature 'Profile' at role level if not exists

SET @LMSROLELMSFEATURE_ID = (SELECT ID FROM LMSROLELMSFEATURE WHERE LMSFEATURE_ID = @LMSFEATURE_ID_PROFILE AND LMSROLE_ID = @LMSROLE_ID)

IF @LMSROLELMSFEATURE_ID IS NULL
BEGIN

	UPDATE  VU360_SEQ WITH ( UPDLOCK )            
	SET     Next_Id = ISNULL(@LMSROLELMSFEATURE_ID, 0) + 1,            
			@LMSROLELMSFEATURE_ID = Next_Id            
	WHERE   Table_Name = 'LMSROLELMSFEATURE' 

	INSERT INTO LMSROLELMSFEATURE (ID, LMSROLE_ID, LMSFEATURE_ID, ENABLEDTF) VALUES (@LMSROLELMSFEATURE_ID, @LMSROLE_ID, @LMSFEATURE_ID_PROFILE, 1)

END
	
-- assign permission of proctor feature 'Completions' at role level if not exists

SET @LMSROLELMSFEATURE_ID = (SELECT ID FROM LMSROLELMSFEATURE WHERE LMSFEATURE_ID = @LMSFEATURE_ID_COMPLETIONS AND LMSROLE_ID = @LMSROLE_ID)

IF @LMSROLELMSFEATURE_ID IS NULL
BEGIN

	UPDATE  VU360_SEQ WITH ( UPDLOCK )            
	SET     Next_Id = ISNULL(@LMSROLELMSFEATURE_ID, 0) + 1,            
			@LMSROLELMSFEATURE_ID = Next_Id            
	WHERE   Table_Name = 'LMSROLELMSFEATURE' 

	INSERT INTO LMSROLELMSFEATURE (ID, LMSROLE_ID, LMSFEATURE_ID, ENABLEDTF) VALUES (@LMSROLELMSFEATURE_ID, @LMSROLE_ID, @LMSFEATURE_ID_COMPLETIONS, 1)

END




UPDATE  VU360_SEQ WITH ( UPDLOCK )            
SET     Next_Id = ISNULL(@CREDENTIAL_PROCTOR_ID, 0) + 1,            
		@CREDENTIAL_PROCTOR_ID = Next_Id            
WHERE   Table_Name = 'CREDENTIAL_PROCTOR' 

PRINT @CREDENTIAL_PROCTOR_ID

INSERT INTO CREDENTIAL_PROCTOR(ID,CREDENTIAL_ID,PROCTOR_ID)
VALUES(@CREDENTIAL_PROCTOR_ID,@CREDENTIAL_ID,@PROCTOR_ID)

        COMMIT                                                      
      END TRY                                                      
                                                       
      BEGIN CATCH                                                      
      ROLLBACK                                                      
         DECLARE @ErrMsg NVARCHAR(4000)                    
          , @ErrSeverity INT                                  
          , @ErrState INT                                                      
         SELECT   @ErrMsg = ERROR_MESSAGE()                  
                , @ErrSeverity = ERROR_SEVERITY()                                
                , @ErrState = ERROR_STATE()                                                      
         RAISERROR ( @ErrMsg , @ErrSeverity , 1 )                                                      
                                                       
  END CATCH   			
--SET @CREDENTIAL_ID = (SELECT TOP 1 ID FROM @CREDENDTIAL)

/*
DECLARE CREDENTIAL_CURSOR CURSOR        
      FOR SELECT  ID        
       FROM    @CREDENDTIAL                    
                          
   OPEN CREDENTIAL_CURSOR 
     FETCH NEXT FROM CREDENTIAL_CURSOR INTO @CREDENTIAL_ID
                         
   WHILE @@FETCH_STATUS = 0                          
      BEGIN  
      
			UPDATE  VU360_SEQ WITH ( UPDLOCK )            
			SET     Next_Id = ISNULL(@CREDENTIAL_PROCTOR_ID, 0) + 1,            
					@CREDENTIAL_PROCTOR_ID = Next_Id            
			WHERE   Table_Name = 'CREDENTIAL_PROCTOR' 
			
			INSERT INTO CREDENTIAL_PROCTOR(ID,CREDENTIAL_ID,PROCTOR_ID)
			VALUES(@CREDENTIAL_PROCTOR_ID,@CREDENTIAL_ID,@PROCTOR_ID)
			
      
      
      
      FETCH NEXT FROM CREDENTIAL_CURSOR INTO @CREDENTIAL_ID
       END                          
   CLOSE CREDENTIAL_CURSOR                          
   DEALLOCATE CREDENTIAL_CURSOR  
*/