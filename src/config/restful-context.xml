<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	360-TechnologyStack-Migration:
	Changer versions for schema definitions
	A change for GIT
 -->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		                http://www.springframework.org/schema/context 
		                http://www.springframework.org/schema/context/spring-context-4.1.xsd" >
	 
	 
	<context:annotation-config /> 
	
	<!-- The <context:component-scan> tag instructs Spring to scan for the specified package for controller classes. --> 
    <context:component-scan base-package="com.softech.vu360.lms.web.restful.request.**.controller,com.softech.vu360.lms.rest" />	
    
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
    
    <!-- In Spring MVC application, often times, you may applying few view resolver strategies to resolve the view name. For
         example, combine three view resolvers together : InternalResourceViewResolver, ResourceBundleViewResolver and 
         XmlViewResolver.  
         
         But, if a view name is returned, which view resolver strategy will be used?
         
         If multiple view resolver strategies are applied, you have to declare the priority through "order" property, where 
         the lower order value has a higher priority
         
         In Spring MVC, XmlViewResolver is used to resolve "view name" based on view beans in the XML file. By default, 
         XmlViewResolver will loads the view beans from /WEB-INF/views.xml, however, this location can be overridden through
         the "location" property.
         
         A controller class, returns a view, named "WelcomePage".
         
         When a view name "WelcomPage" is returned by controller, the XmlViewResolver will find the bean id "WelcomPage" in
         "spring-views.xml" file, and return the corresponds viewâ€™s URL
    -->
    <bean name="viewResolver" class="org.springframework.web.servlet.view.XmlViewResolver">
        <property name="order" value="0" />
        <property name="location">
	       <value>/WEB-INF/spring-views.xml</value>
	  	</property>
    </bean>		
    
    <bean id="exceptionResolver" class="org.springframework.web.servlet.view.json.exception.JsonExceptionResolver">
    	<property name="exceptionView">
    		<value>jsonView</value>
    	</property>
        <property name="errorHandler">
        	<list>
            	<ref bean="statusError" />
                <ref bean="modelflagError" />
            </list>
        </property>
        <property name="exceptionHandler">
     		<list>
            	<ref bean="stackTraceExceptionHandler" />
                <ref bean="exceptionMessageExceptionHandler" />
            </list>
        </property>
	</bean>
    
    <!-- http://spring-json.sourceforge.net/demoapp.html -->
    <bean name="statusError" class="org.springframework.web.servlet.view.json.error.HttpStatusError"/>
        
    <bean name="modelflagError" class="org.springframework.web.servlet.view.json.error.ModelFlagError"/>
        
    <bean name="stackTraceExceptionHandler" class="org.springframework.web.servlet.view.json.exception.StackTraceExceptionHandler"/>
        
    <bean name="exceptionMessageExceptionHandler" class="org.springframework.web.servlet.view.json.exception.ExceptionMessageExceptionHandler"/>
 
</beans>
