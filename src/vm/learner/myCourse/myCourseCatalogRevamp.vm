<style>

/* Course Browser Overlay */

    .overlay-title{
        text-decoration: underline;
        cursor: pointer;
    }

    #overlay .overlay-title{
        font-size:14px;
        font-weight:bold;
        cursor: pointer;
        text-decoration: underline;
    
    }

	#overlay td{
        height:30px;
    }
    
	#overlay{
        position:absolute;
        border:1px solid #a8cafe;
        background-color: #DFECF9;
        z-index:12;
        padding:10px;
        margin:0;
        font-size:14px;
        display: none;
    }
    
	#overlay .header{
        font-weight:bold;
        height:30px;
    }
    #overlay .close, #overlay .close:hover{
        font-size:12px;
        text-decoration: underline;
        cursor:pointer;  
    }
    #overlay .close:hover{
        color:#2975e8;
    }
    #overlay-close{
        float:right;
        margin-bottom:4px;
        text-decoration: underline;
        color:#4b84f8;
        cursor: pointer;
        font-size:10px;
    }    
    #overlay-header{
        float:left;
        font-weight: bold;
        margin-left:2px;
        margin-bottom:4px;
    }



/* Course Browser 'Bread Crumbs'*/

    .crumb{
    	padding-right:5px;
    	display:inline;
    	cursor:pointer;
    	text-transform:none;
    	text-decoration:underline;
    }
    .crumb-title{
    	display:inline;
    }

	
/* Course Browser Rows */
	

    .row{
    	border:none;
    }
    .row td{
    	border-top:1px solid #DDDDDD;
    	height:30px;
    	background-color:#FFFFFF;
    }
  
    .colored-row{
    	background-color:#F4F4F4;
    }
    .colored-row td{
    	border-top:1px solid #DDDDDD;
    	height:30px;
    }

	.last-column-row td{
    	border-bottom:1px solid #DDDDDD;
		
    }


/* Overlay Details Style */


    .overlay-details{
    	border-style:solid;
    	border-width:1px;
    }
    .overlay-details-label{
    	padding:5px;
    	width:200px;
    	vertical-align:top;
    }
    .overlay-details-text{
    	padding:5px;
    	vertical-align:top;
    	border-left:1px solid #A8CAFE;
    }


    .overlay-row{
    	border:none;
    }
    .overlay-row td{
    	border-top:1px solid #A8CAFE;
    	height:30px;
    	background-color:#FFFFFF;
    	padding-left:10px;
    }

    .overlay-colored-row{
    	background-color:#E6F2FD;
    }
    .overlay-colored-row td{
    	border-top:1px solid #A8CAFE;
    	height:30px;
    	padding-left:10px;
    }


/* Course Table Rows Style */
	

    .course-row{
    	border:none;
    }
    .course-row td{
        border-top:1px solid #DDDDDD;
        height:45px;
        background-color:#FFFFFF;
    }

	.course-colored-row{	
    	background-color:#F4F4F4;
    }
    .course-colored-row td{
    	border-top:1px solid #DDDDDD;
    	height:45px;
    }

    .course-last-row td{
    	border-bottom:1px solid #DDDDDD;
    }


    .schedule-detail tr{
    	height:30px;
    	background-color:#FFFFFF;
    	padding-left:10px;
		
    }
	.schedule-detail td{
		border-bottom:1px solid #A8CAFE;
	}
    .schedule-detail-header tr{
    }

    .browse-content-table{
    	border:1px solid #DDDDDD;
    	margin-bottom:20px;
    }
    .browse-content-table a, .browse-content-table a:visited, .browse-content-table a:link{
    	color:#000000;
    }
    .browse-content-table td{
        padding-left:10px;
        padding-right:5px;
    }
    .browse-content-table .multiline-row td{
        height:auto;
        padding-left:5px;
        padding-right:5px;
        padding-top:10px;
        padding-bottom:10px;
    }
    .browse-content-table .multiline-row td p{
        margin:0;
        padding:0;
    }
    .browse-content-table .content-row{}
    
    .browse-content-table-header{
        height:30px;
        padding:0;
        font-weight:bold;
        text-transform: uppercase;
        background-color:#efefef;
        border-bottom:1px solid #DDDDDD;
    }
    .browse-content-table-control-header{
        height:30px;
        padding:0;
        font-weight:bold;
        text-transform: uppercase;
        background-color:#F4F4F4;
        border-bottom:1px solid #DDDDDD;
    }
    
    .browse-content-table-heading{
    	float:left;
    }
    
    .browse-content-table .row-med{
        font-size:17px;
        padding:5px;
    }
    
    .browse-content-table .input-sml{
        width:160px;
        color:#444444;
    }
    
    .browse-content-table .input-med{
        width:250px;
        color:#444444;
    }
    
    .browse-content-table .select-sml{
        float:left;
        width:121px;
        color:#444444;
        margin-right:10px;
    }
    
    .browse-content-table .select-med{
        width:254px;
        color:#444444;
    }
    
    .browse-content-table .textarea-med{
        font-family: "Tahoma";
        font-size:12px;
        overflow:auto;
        min-width: 350px;
        min-height: 100px;
    }
    
    .browse-content-table .textarea-sml{
        font-family: "Tahoma";
        font-size:12px;
        overflow:auto;
        min-width: 250px;
        min-height: 100px;
    }
    
    .browse-content-table .error{
        color:#FF1122;
        font-weight:bold;
        text-indent:20px;
        background-image:url(../images/!mark.gif);
        background-repeat: no-repeat;
    }
    
    
    .course-info-text, .course-info-text a:link, .course-info-text a:visited, .course-info-text a:active{
    	color:#999999;
    	font-size:10px;
    	margin-top:5px;
    }
    
    #browse-columns-container{
    max-height:165px;
    overflow:hidden;
    }
    
    #browse-columns-scroller{
       max-height:165px;
    }
    
    .overflow-x-hidden{
    	overflow-x:hidden
    }
    
    .overflow-x-auto{
    	overflow-x:auto
    }
    
    .browse-column{
        float:left;
        height:150px;
		width:375px;
        overflow-x:hidden;
		overflow-y:auto;
        border-right:1px solid #DDDDDD;
    }
    .selection-message{
        margin-top:65px;
        height:20px;
        color:#B6B6B6;
        font-weight: bold;
        font-size:16px;
        text-align: center;
    }
    
    .browse-name, .browse-name-selected{
        float:left;
        font-size:11px;
        cursor:pointer;
    }
    .browse-name-selected{
        font-weight:bold;
        font-size:11px;
    }
    
    .icon-caret-right, .icon-caret-disabled-right, .icon-caret-selected{
        float:right;
        width:10px;
        height:10px;
        background-image: url(brands/default/en/images/pageicons/icon-caret-right.png);
        background-repeat: no-repeat; 
    }
    
    .icon-caret-disabled-right{
        background-image: url(brands/default/en/images/pageicons/icon-caret-disabled-right.png);
    }
    .icon-caret-selected{
    	background-image: url(brands/default/en/images/pageicons/icon-caret-selected.png);
    }
    
    #browse-columns-container{
        max-height:165px;
        overflow:hidden;
    }
    
    #browse-columns-scroller{
       max-height:165px;
    }
    
    .overflow-y-hidden{
        overflow-y:hidden
    }
    
    .overflow-y-auto{
        overflow-y:auto
    }
</style>

#set ($courseGroupJSONObject = $!context.gJON)





<script>
	var isBrowserIE6 = "false";
</script>

<!--[if IE 6]>
<script type="text/javascript">
	isBrowserIE6 = true;
</script>
<![endif]-->


<script>



	// NOTE: TESTING DATA!!!
	// var courseGroupJSONObject = {"rootNodes":[{"cgView":{"courses":[],"groupName":"ShujasGroup","id":3,"misc":false,"name":"ShujasGroup","parentCourseGroupId":0,"trainingPlan":false,"trainingPlanName":""},"children":{"4":{"cgView":{"courses":[{"code":"1","courseIconToShow":"lms.pixel.iconSelfPaced","courseId":2,"courseStatus":"","enrollmentId":0,"enrollmentStatus":"notstarted","entitlementId":4112,"groupName":"NestedCourseGroup","name":"Anti-Money Laundering for Insurance ProfessionalsFAS","type":"Self Paced Course"},{"code":"","courseIconToShow":"lms.pixel.iconOnlineSync","courseId":3761,"courseStatus":"","enrollmentId":0,"enrollmentStatus":"notstarted","entitlementId":5857,"groupName":"NestedCourseGroup","name":"Checking for New Entitlement","type":"$brander.getBrandElement("lms.instructor.addCourse.courseType.SYNC")"},{"code":"","courseIconToShow":"lms.pixel.iconSelfPaced","courseId":2549,"courseStatus":"","enrollmentId":0,"enrollmentStatus":"notstarted","entitlementId":3804,"groupName":"NestedCourseGroup","name":"Jason Testing SCORM Course","type":"Scorm Course"},{"code":"","courseIconToShow":"lms.pixel.iconWeblink","courseId":3056,"courseStatus":"","enrollmentId":0,"enrollmentStatus":"notstarted","entitlementId":4404,"groupName":"NestedCourseGroup","name":"My customer Course 4","type":"Weblink"},{"code":"","courseIconToShow":"lms.pixel.iconWeblink","courseId":4096,"courseStatus":"","enrollmentId":0,"enrollmentStatus":"notstarted","entitlementId":6160,"groupName":"NestedCourseGroup","name":"New Course For Noman","type":"Weblink"},{"code":"","courseIconToShow":"lms.pixel.iconWeblink","courseId":6018,"courseStatus":"","enrollmentId":0,"enrollmentStatus":"notstarted","entitlementId":101204,"groupName":"NestedCourseGroup","name":"New Course for survey testing","type":"Weblink"},{"code":"","courseIconToShow":"lms.pixel.iconWeblink","courseId":5329,"courseStatus":"","enrollmentId":0,"enrollmentStatus":"notstarted","entitlementId":100455,"groupName":"NestedCourseGroup","name":"Shakoor Custom Course","type":"Weblink"},{"code":"","courseIconToShow":"lms.pixel.iconWeblink","courseId":3809,"courseStatus":"","enrollmentId":0,"enrollmentStatus":"notstarted","entitlementId":5904,"groupName":"NestedCourseGroup","name":"test-lms-2911","type":"Weblink"},{"code":"","courseIconToShow":"lms.pixel.iconWeblink","courseId":5328,"courseStatus":"","enrollmentId":0,"enrollmentStatus":"notstarted","entitlementId":100454,"groupName":"NestedCourseGroup","name":"YH Custom Course","type":"Weblink"}],"groupName":"NestedCourseGroup","id":4,"misc":false,"name":"NestedCourseGroup","parentCourseGroupId":3,"trainingPlan":false,"trainingPlanName":""},"parentid":3,"children":{},"depth":1}},"depth":0},{"cgView":{"courses":[{"code":"5d381413-2eb5-42a4-bc0a-1eb8ed08d9ef","courseIconToShow":"lms.pixel.iconOnlineSync","courseId":3761,"courseStatus":"","enrollmentId":11182,"enrollmentStatus":"notstarted","entitlementId":5857,"groupName":"MISCELLENOUS","name":"Checking for New Entitlement","type":"$brander.getBrandElement("lms.instructor.addCourse.courseType.SYNC")"},{"code":"07ae5d3a-198b-4396-9567-83b8ee4ca264","courseIconToShow":"lms.pixel.iconWeblink","courseId":3984,"courseStatus":"","enrollmentId":7943,"enrollmentStatus":"notstarted","entitlementId":4112,"groupName":"MISCELLENOUS","name":"Customer Course deleted Previously","type":"Weblink"},{"code":"92853868-e2f3-48f6-b484-81b67ad59777","courseIconToShow":"lms.pixel.iconSelfPaced","courseId":2549,"courseStatus":"","enrollmentId":6612,"enrollmentStatus":"notstarted","entitlementId":3804,"groupName":"MISCELLENOUS","name":"Jason Testing SCORM Course","type":"Scorm Course"},{"code":"a740e6a2-8ae9-4980-8b53-f0572377feea","courseIconToShow":"lms.pixel.iconWeblink","courseId":705,"courseStatus":"","enrollmentId":3095,"enrollmentStatus":"notstarted","entitlementId":1876,"groupName":"MISCELLENOUS","name":"Larry Kar Cu123ourse Larry Kar Cu123ourse  Larry K","type":"Weblink"},{"code":"8ba39793-2a95-4e4b-b32a-aef78207e7e5","courseIconToShow":"lms.pixel.iconWeblink","courseId":3056,"courseStatus":"","enrollmentId":7662,"enrollmentStatus":"notstarted","entitlementId":4404,"groupName":"MISCELLENOUS","name":"My customer Course 4","type":"Weblink"},{"code":"fbfbd620-d193-4bc1-ad87-02ba8bffc357","courseIconToShow":"lms.pixel.iconWeblink","courseId":4096,"courseStatus":"","enrollmentId":131265,"enrollmentStatus":"notstarted","entitlementId":6160,"groupName":"MISCELLENOUS","name":"New Course For Noman","type":"Weblink"},{"code":"a32d5c3d-d2ca-42da-b742-5b7ea3b7b7ae","courseIconToShow":"lms.pixel.iconWeblink","courseId":6018,"courseStatus":"","enrollmentId":142412,"enrollmentStatus":"notstarted","entitlementId":101204,"groupName":"MISCELLENOUS","name":"New Course for survey testing","type":"Weblink"},{"code":"c5e5f68a-9da8-49ff-b0bd-871b5e5b0b2c","courseIconToShow":"lms.pixel.iconWeblink","courseId":5329,"courseStatus":"","enrollmentId":134812,"enrollmentStatus":"notstarted","entitlementId":100455,"groupName":"MISCELLENOUS","name":"Shakoor Custom Course","type":"Weblink"},{"code":"51a19280-3db9-49f1-b7fe-d1dde666dcb9","courseIconToShow":"lms.pixel.iconWeblink","courseId":3809,"courseStatus":"","enrollmentId":133712,"enrollmentStatus":"notstarted","entitlementId":5904,"groupName":"MISCELLENOUS","name":"test-lms-2911","type":"Weblink"},{"code":"8419ded7-fe3f-4801-b9d4-f0efdef3e421","courseIconToShow":"lms.pixel.iconWeblink","courseId":5328,"courseStatus":"","enrollmentId":133462,"enrollmentStatus":"notstarted","entitlementId":100454,"groupName":"MISCELLENOUS","name":"YH Custom Course","type":"Weblink"}],"groupName":"Miscellaneous","id":0,"misc":true,"name":"Miscellaneous","parentCourseGroupId":0,"trainingPlan":false,"trainingPlanName":""},"children":{}}]};

	
	// Define JSONObject.
	var courseGroupJSONObject = Array();
	#if('$!courseGroupJSONObject' != '')
		courseGroupJSONObject = $!courseGroupJSONObject;
	#end

	// Define Branded Course Type Icon Image Paths
	// default - TODO, need to change for SynchronousCourse[online,offline], InstructorConnectCourse[online,offline]
	var iconOnlineGif = "$brander.getBrandElement('lms.pixel.iconOnlineGif')"; 
	//Weblink
	var iconWeblinkCourse = "$brander.getBrandElement('lms.pixel.iconWeblink')";
	//DFC
	var iconDiscussionForum = "$brander.getBrandElement('lms.pixel.iconDFC')";
	//Self-Paced , Legacy Course, ScormCourse
	var iconSelfpaced = "$brander.getBrandElement('lms.pixel.iconSelfPaced')";
	//Scorm Course
	var iconScormCourse = "$brander.getBrandElement('lms.pixel.iconSelfPaced')";
	//Legacy Course
	var iconLegacyCourse = "$brander.getBrandElement('lms.pixel.iconSelfPaced')";
	// Online Sync
	var iconActiveVirtualClassroom = "$brander.getBrandElement('lms.pixel.iconOnlineAnimatedSync')";
	// Offline Sync
	var iconInactiveVirtualClassroom = "$brander.getBrandElement('lms.pixel.iconOnlineSync')";
	// Offline Classroom
	var iconOfflineClassroom = "$brander.getBrandElement('lms.pixel.iconOffineSync')";
	
	// Homework assignment
	var iconhomeworkAssignMent = "$brander.getBrandElement('lms.pixel.homeworkAssignment')";

</script>
<script>
	
	// Global Variables
	// TODO: Move to namespace
	var currentCGView = new Object();
	var groupDisplayState = new Array();
	var minimumColumnWidth = 375;	
	
	// Prepare My Courses Course Group Browser
	$(document).ready(function() { 
		// Update Group Display State
		updateGroupDisplayState(0, 0);
		// Populate Root Column
		populateRootGroupColumn(courseGroupJSONObject.rootNodes);
		// Resize and Scroll
		resizeGroupBrowser();
		scrollToStart();
	});
	
	
	
	// OVERLAY GENERAL: START -----------------------------------
	
	// Load Overlay
	function loadOverlay(){

		// Reset Overlay Content Areas
		$('#overlay').find('#overlay-details').html('');
		$('#overlay').find('#overlay-header').html('');
		
		// Loading Overlay Object
		var overlayObject = getLoadingOverlayObject();
		
		// Configure Overlay
		configureGenericOverlay(overlayObject);
		
		// Dislplay Overlay
		positionOverlay(250);
		
		// Add Overlay 'Close' Click Event
		$('#overlay-close').click(function(){
			closeOverlay();
		});
	}
	
	// Hide Overlay
	function closeOverlay(){
		$('#overlay').css('display', 'none');	
	}
	
	// Position and Resize Overlay
	function positionOverlay(overlayHeight){
		
		// Define values for calculating Overlay Dimensions, and Position.
		var containerWidth = $(window).width();
		var totalScreenHeight = $('#scrollable').height();
		var containerLeft = $('#browse-columns-container').offset().left;      
		var calculatedWidth = (containerWidth/2);
		var calculatedLeft = containerLeft+(calculatedWidth/2);
	
		// Determine Available Height
		
		var availableOverlayHeight = totalScreenHeight - 15;

		//console.log("height " + $(window).height());
		//console.log(availableOverlayHeight);
		//console.log(overlayHeight);
		
		// Determine Overlay Height
		if(overlayHeight > availableOverlayHeight){
			overlayHeight = availableOverlayHeight;
		}

		// Define Overlay Detail Height
		
		var overlayDetailHeight = overlayHeight - 40;
		overlayDetailHeight = overlayDetailHeight + "px";

		// Define Overlay Style 
        var courseOverlayStyle = "top:70px; left:" + calculatedLeft + "px; width:"+calculatedWidth+"px;";

		// Style Overlay
		$('#overlay').attr('style', courseOverlayStyle);
		$('#overlay').css('display', 'block');
		$('#overlay').css('height', overlayHeight);
		$('#overlay-details').css('overflow', 'auto');
		$('#overlay-details').css('height', overlayDetailHeight);
	}
	
	// OVERLAY GENERAL: END -------------------------------------
	
	// OVERLAY OBJECTS: START -----------------------------------
	
	// Loading Overlay Object
	function getLoadingOverlayObject(){
		var overlayObject = {
			detailMarkup : "",
			headerMarkup: "Loading",
			detailHeight: 100
		}
		return overlayObject;
	}

	// Error Overlay Object
	function getErrorOverlayObject(errorText){
		var errorDetailMarkup = "";
		if(errorText!= ""){
			errorDetailMarkup = errorText
		}
		var overlayObject = {
			detailMarkup : errorText,
			headerMarkup: "Error",
			detailHeight: 100
		}
		return overlayObject;
	}
	
	// Course Description Overlay Object
	function getCourseDescriptionOverlayObject(courseDescriptionJSON){
		// Set Overlay Title
		var overlayTitle = courseDescriptionJSON.courseTitle;		
		
		// Branded Course Description Labels
		var courseIdLabel = "$brander.getBrandElement("lms.courseDesc.label.courseId")";
        //var courseTypeLabel = "$brander.getBrandElement("lms.courseDesc.label.courseType")";
        var courseCreditHoursLabel = "$brander.getBrandElement("lms.courseDesc.label.creditHours")";
        var courseDescriptionLabel = "$brander.getBrandElement("lms.courseDesc.label.courseDescription")";
        var courseOverviewLabel = "$brander.getBrandElement("lms.courseDesc.label.courseOverview")";			   
        var courseGuideLabel = "$brander.getBrandElement("lms.courseDesc.label.courseGuide")";			   
		var coursePrerequisitesLabel = "$brander.getBrandElement("lms.courseDesc.label.prerequisites")";
		var courseLearningObjectivesLabel = "$brander.getBrandElement("lms.courseDesc.label.learningObjectives")";
        var courseQuizInfoLabel = "$brander.getBrandElement("lms.courseDesc.label.quizInfo")";
        var courseFinalExamInfoLabel = "$brander.getBrandElement("lms.courseDesc.label.finalExamInfo")";
        var courseEndOfCourseInstructionsLabel = "$brander.getBrandElement("lms.courseDesc.label.endInstructions")";
        var courseAdditionalDetailsLabel = "$brander.getBrandElement("lms.courseDesc.label.additionalDetails")";	
        var courseDeliveryMethodLabel = "$brander.getBrandElement("lms.courseDesc.label.deliveryMethod")";
        var courseApprovedHoursLabel = "$brander.getBrandElement("lms.courseDesc.label.approvedHours")";
        var courseDurationLabel = "$brander.getBrandElement("lms.courseDesc.label.duration")";
		var courseApprovalNumberLabel = "$brander.getBrandElement("lms.courseDesc.label.approvalNumber")";
		
		// Course Description Values
		var courseId = courseDescriptionJSON.courseId;
		var courseTitleText = courseDescriptionJSON.courseTitle;
		//var courseTypeText = courseDescriptionJSON.courseType;
		var courseCreditHoursText = courseDescriptionJSON.courseCreditHours;
		var courseDescriptionText = courseDescriptionJSON.courseDescription;		
		var courseOverviewText = courseDescriptionJSON.courseOverview;
		var courseGuideText = courseDescriptionJSON.courseGuide;
		var coursePrerequisitesText = courseDescriptionJSON.coursePrerequisites;
		var courseLearningObjectivesText = courseDescriptionJSON.courseLearningObjectives;
		var courseQuizInfoText = courseDescriptionJSON.courseQuizInfo;
		var courseFinalExamInfoText = courseDescriptionJSON.courseFinalExamInfo;
		var courseEndOfCourseInstructionsText =	courseDescriptionJSON.courseEndOfCourseInstructions;
		var courseAdditionalDetailsText = courseDescriptionJSON.courseAdditionalDetails;		
		var courseDeliveryMethodText = courseDescriptionJSON.courseDeliveryMethod;
		var courseApprovedHoursText = courseDescriptionJSON.courseApprovedCourseHours;
		var courseDurationText = courseDescriptionJSON.courseDuration;
		var courseApprovalNumberText = courseDescriptionJSON.courseApprovalNumber;
		
		// Items defined in the Course Description JSONObject will be added to this Array.
		var overlayDetailRows = new Array();
		 
		if(courseId!=undefined){
			var courseIdRowObject = buildOverlayDetailRowObject("courseId", courseIdLabel, courseId);
			overlayDetailRows.push(courseIdRowObject);
		}
		//if(courseTypeText!=undefined){
		//	var courseTypeRowObject = buildOverlayDetailRowObject("courseType", courseTypeLabel, courseTypeText);
		//	overlayDetailRows.push(courseTypeRowObject);
		//}
		if(courseCreditHoursText!=undefined){
			var courseCreditHoursRowObject = buildOverlayDetailRowObject("courseCreditHours", courseCreditHoursLabel, courseCreditHoursText);
			overlayDetailRows.push(courseCreditHoursRowObject);
		}
		if(courseDescriptionText!=undefined){
			var courseDescriptionRowObject = buildOverlayDetailRowObject("courseDescription", courseDescriptionLabel, courseDescriptionText);
			overlayDetailRows.push(courseDescriptionRowObject);
		}
		if(courseOverviewText!=undefined){
			var courseOverviewRowObject = buildOverlayDetailRowObject("courseOverview", courseOverviewLabel, courseOverviewText);
			overlayDetailRows.push(courseOverviewRowObject);
		}
		if(courseGuideText!=undefined){
			var courseGuideRowObject = buildOverlayDetailRowObject("courseGuide", courseGuideLabel, courseGuideText);
			overlayDetailRows.push(courseGuideRowObject);
		}
		if(coursePrerequisitesText!=undefined){
			var coursePrerequisitesRowObject = buildOverlayDetailRowObject("coursePrerequisites", coursePrerequisitesLabel, coursePrerequisitesText);
			overlayDetailRows.push(coursePrerequisitesRowObject);
		}
		if(courseLearningObjectivesText!=undefined){
			var courseLearningObjectivesRowObject = buildOverlayDetailRowObject("courseLearningObjectives", courseLearningObjectivesLabel, courseLearningObjectivesText);
			overlayDetailRows.push(courseLearningObjectivesRowObject);
		}
		if(courseQuizInfoText!=undefined){
			var courseQuizeInfoRowObject = buildOverlayDetailRowObject("courseQuizInfo", courseQuizInfoLabel, courseQuizInfoText);
			overlayDetailRows.push(courseQuizeInfoRowObject);
		}
		if(courseFinalExamInfoText!=undefined){
			var courseFinalExamInfoRowObject = buildOverlayDetailRowObject("courseFinalExamInfo", courseFinalExamInfoLabel, courseFinalExamInfoText);
			overlayDetailRows.push(courseFinalExamInfoRowObject);
		}
		if(courseEndOfCourseInstructionsText!=undefined){
			var courseEndOfCourseInstructionsRowObject = buildOverlayDetailRowObject("courseEndOfCourseInstructions", courseEndOfCourseInstructionsLabel, courseEndOfCourseInstructionsText);
			overlayDetailRows.push(courseEndOfCourseInstructionsRowObject);
		}
		if(courseAdditionalDetailsText!=undefined){
			var courseAdditionalDetailsRowObject = buildOverlayDetailRowObject("courseAdditionalDetails", courseAdditionalDetailsLabel, courseAdditionalDetailsText);
			overlayDetailRows.push(courseAdditionalDetailsRowObject);
		}
		if(courseDeliveryMethodText!=undefined){
			var courseDeliveryMethodRowObject = buildOverlayDetailRowObject("courseDeliveryMethod", courseDeliveryMethodLabel, courseDeliveryMethodText);
			overlayDetailRows.push(courseDeliveryMethodRowObject);
		}
		if(courseApprovedHoursText!=undefined){
			var courseApprovedHoursRowObject = buildOverlayDetailRowObject("courseApprovedHours", courseApprovedHoursLabel, courseApprovedHoursText);
			overlayDetailRows.push(courseApprovedHoursRowObject);
		}
		if(courseDurationText!=undefined){
			var courseDurationRowObject = buildOverlayDetailRowObject("courseDuration", courseDurationLabel, courseDurationText);
			overlayDetailRows.push(courseDurationRowObject);
		}
		if(courseApprovalNumberText!=undefined){
			var courseApprovalNumberRowObject = buildOverlayDetailRowObject("courseApprovalNumber", courseApprovalNumberLabel, courseApprovalNumberText);
			overlayDetailRows.push(courseApprovalNumberRowObject);
		}
				
		// Course Description Overlay Detail Markup
		var overlayDetailMarkup = "<table width='100%' cellpadding='0' cellspacing='0'>";		
		// Build Overlay Detail Rows
		jQuery.each(overlayDetailRows, function(index, rowObject){
			overlayDetailMarkup = overlayDetailMarkup + 
    			"<tr><td class='overlay-details-label'><div id='" + rowObject.rowId + "'>" + rowObject.rowLabel + 
    			"</div></td><td class='overlay-details-text'><div>" + rowObject.rowText + "</div></td></tr>"
		});
		overlayDetailMarkup = overlayDetailMarkup + "</table>";
	
		// Get Course Type Icon
		var overlayHeaderIcon = getCourseIconByType(courseDescriptionJSON.courseType);
		
		// Schedule 'Detail Header' Markup
		var overlayHeaderMarkup = "<table class='course-detail-header' width='100%' border='0' cellpadding='0' cellspacing='0'>" + 
    		"<tr><td valign='middle' style='width:40px'>" + 
    		"<img src='" + overlayHeaderIcon + "'/></td><td valign='middle' nowrap>" + overlayTitle + "</td></tr></table>";
		
		// Overlay Detail Height
		var overlayDetailHeight = overlayDetailRows.length*35;
		
		// Assign Values to return object.
		var overlayDescriptionObject = {
			headerMarkup : overlayHeaderMarkup,
			detailMarkup : overlayDetailMarkup,
			detailHeight : overlayDetailHeight
		}
		return overlayDescriptionObject;
	}
	
	// Build Overlay Detail Row Object
	// TODO: This should be in getCourseDescriptionOverlayObject?
	function buildOverlayDetailRowObject(id, label, text){
		var rowObject = {
			rowId: id,
			rowLabel: label,
			rowText: text
		}
		return rowObject;
	}
	
	/**
	 * This method returns markup generated from Javascript 
	 * based on schedule data packed in JSON.
	 */
	function getCourseScheduleOverlayObject(courseScheduleJSON){
		var courseScheds = courseScheduleJSON.syncClassesWithSessions;
		var courseTitle = courseScheduleJSON.courseTitle;
		var courseScheduleIcon = getBrandedCourseRowIcon("lms.pixel.iconOnlineSync");
		// Schedule 'Detail Header' Markup
		var overlayHeaderMarkup = "<table class='schedule-detail-header' width='100%' border='0' cellpadding='0' cellspacing='0'>" + 
    		"<tr><td valign='middle' style='width:40px'>" + 
    		"<img src='" + courseScheduleIcon + "'/></td><td valign='middle' nowrap>" + courseTitle + "</td></tr></table>";
		
		var overlayDetailMarkup = 
		"<table class='schedule-detail' width='100%' cellpadding='5' cellspacing='0' style=''>" + 
				"<tr>" +
					"<td class=''><span class='headerRow' style='text-transform:uppercase;'>$brander.getBrandElement('lms.courseSchedule.description.tableheader.secondcol.text')</span></td>" + 
					"<td><span class='headerRow'style='text-transform:uppercase;'>Status</span></td>" +
				"</tr>";
		for(var index = 0; index < courseScheds.length; index++){
			var courseSched = courseScheds[index];
			var courseClassEndDate = courseSched.courseClassEndDate;
			var courseClassStartDate = courseSched.courseClassStartDate;
			var courseClassStartTime= courseSched.courseClassStartTime;			
			var courseClassEndTime= courseSched.courseClassEndTime;
			var courseMeetingType = courseSched.courseMeetingType == undefined ? "": courseSched.courseMeetingType;
			var courseStatus = courseSched.courseStatus;
			var courseTitle = courseSched.courseTitle;
			var courseCurrentlyInSession = courseSched.currentlyInSession;
			var courseScheduleStatusClass = "";
			var courseScheduleIcon = "";
			var courseScheduleText = getCourseScheduleText(courseClassStartDate, courseClassEndDate,courseClassStartTime,courseClassEndTime);
			
			overlayDetailMarkup += 
					"<tr>"+
					"<td height='10px' width='100%' style='padding-left:10px;'>" + courseScheduleText + "</td>"+
					"<td height='10px' style='text-align:right;'><span class='$brander.getBrandElement('lms.mycourse.recentcourse.cssClass.text-green')'>" + courseStatus + "</span></td>" + 
					"</tr>";
		}
    	overlayDetailMarkup += "</table>";
		
		// Assign values to return object.
		var overlayDescriptionObject = {
			detailMarkup : overlayDetailMarkup,
			headerMarkup: overlayHeaderMarkup,
			detailHeight: 200
		}
		
		return overlayDescriptionObject;
	}
        
	// Determine Course Schedule Text
	// Used in getCourseScheduleOverlayObject()
	// TODO: This should be in getCourseScheduleOverlayObject?
	function getCourseScheduleText(courseClassStartDate, courseClassEndDate,courseClassStartTime,courseClassEndTime){
	
        var month=new Array(12);
        month[0]="January";
        month[1]="February";
        month[2]="March";
        month[3]="April";
        month[4]="May";
        month[5]="June";
        month[6]="July";
        month[7]="August";
        month[8]="September";
        month[9]="October";
        month[10]="November";
        month[11]="December";
		
		var weekday=new Array(7);
        weekday[0]="Sunday";
        weekday[1]="Monday";
        weekday[2]="Tuesday";
        weekday[3]="Wednesday";
        weekday[4]="Thursday";
        weekday[5]="Friday";
        weekday[6]="Saturday"; 
		
        var scheduleStartDate = new Date(courseClassStartDate.time);
		var scheduleEndDate = new Date(courseClassEndDate.time);
		
		var dayOfStartSession = weekday[scheduleStartDate.getUTCDay()];
		var dayOfEndSession = weekday[scheduleEndDate.getUTCDay()];
		var startTimeHours = scheduleStartDate.getUTCHours();
		var startTimeMinutes = scheduleStartDate.getUTCMinutes();
		var startTimeSeconds = scheduleStartDate.getUTCSeconds();				
		var startTime = courseClassStartTime;//scheduleStartDate.toTimeString().split('GMT')[0];//startTimeHours + ":" + startTimeMinutes + ":" + startTimeSeconds;
		var endTimeHours = scheduleEndDate.getUTCHours();
		var endTimeMinutes = scheduleEndDate.getUTCMinutes();
		var endTimeSeconds = scheduleEndDate.getUTCSeconds();
		var endTime = courseClassEndTime;//scheduleEndDate.toTimeString().split('GMT')[0];//endTimeHours + " " + endTimeMinutes + " " + endTimeSeconds;
		
		var startTimeMonth = month[scheduleStartDate.getUTCMonth()];
		var startTimeDate = scheduleStartDate.getUTCDate();
		var startTimeYear = scheduleStartDate.getUTCFullYear();
		
		
		var endTimeMonth = month[scheduleEndDate.getUTCMonth()];
		var endTimeDate = scheduleEndDate.getUTCDate();
		var endTimeYear = scheduleEndDate.getUTCFullYear();
		
		var scheduleFullStartDate = startTimeMonth + " " + startTimeDate + ", " + startTimeYear;
		var scheduleFullEndDate = endTimeMonth + " " + endTimeDate + ", " + endTimeYear;
		var courseScheduleText = dayOfStartSession + ", " + scheduleFullStartDate + ", " + startTime + " - " + dayOfEndSession + ", " + scheduleFullEndDate + ", " + endTime;
		
		return courseScheduleText;
	}
	
	// OVERLAY OBJECTS: END ------------------------------------
	
	
	// OVERLAY EVENTS: START -----------------------------------
	
    // Open Course Description Overlay
    function openCourseDescriptionOverlay(courseId, enrollmentId){
		
		// Open Overlay Container
		loadOverlay();
		
		// Build Course Description Overlay URL
		#set($courseDescriptionOverlay = "/lrn_courseOverlay.do")
		
		// Build Course Description Overlay URL Parameters
		var courseDescriptionOverlayUrl = "#springUrl(${courseDescriptionOverlay})"
			+ "?courseId="+courseId+"&learnerEnrollmentId="+enrollmentId;
		
		// Get JSONObject for Course Detail Overlay
        jQuery.getJSON(courseDescriptionOverlayUrl, function(courseDescriptionJSON) {            
            if(courseDescriptionJSON.courseId != undefined){	
				configureCourseDescriptionOverlay(courseDescriptionJSON);
			}else{
				configureGenericOverlay(getErrorOverlayObject("There was an error getting the course description."));
			}
        });
    }
	
	// Open Course Schedule Overlay
	function openCourseScheduleOverlay(courseId, enrollmentId){	
	
		// Open Overlay Container
		loadOverlay();
		
		// Build Course Schedule Overlay URL
		#set($courseScheduleOverlay = "/lrn_scheduleOverlay.do")
		
		// Build Course Schedule Overlay URL Parameters
		var courseScheduleOverlayURL = "#springUrl(${courseScheduleOverlay})"
			+ "?courseId="+courseId+"&learnerEnrollmentId="+enrollmentId;		
		
		// Get JSONObject for Schedule Overlay
        jQuery.getJSON(courseScheduleOverlayURL, handleCourseResults);
	}
	
	function handleCourseResults(courseScheduleJSON) {
		if(courseScheduleJSON.syncClassesWithSessions != undefined){
			configureCourseScheduleOverlay(courseScheduleJSON);
		}else{
			configureGenericOverlay(getErrorOverlayObject("There was an error getting the course schedule."));
		}
	}
	
	// OVERLAY EVENTS: END ------------------------------------
    
	
	// OVERLAY CONFIGURE: START -----------------------------------

	// Configure Generic Overlay with overlayObject
	function configureGenericOverlay(overlayObject){
		
		// Overlay Object Values
		var overlayHeaderMarkup = overlayObject.headerMarkup;
		var overlayDetailMarkup = overlayObject.detailMarkup;
		var overlayHeight = overlayObject.detailHeight;
		
		// Add Overlay Header Markup
		$('#overlay').find('#overlay-header').html(overlayHeaderMarkup);
		
		// Add Overlay Detail Makup
		$('#overlay').find('#overlay-details').append(overlayDetailMarkup);
		
		// Style added detail rows.
		$('#overlay-details').css('border', '1px solid #A8CAFE');
		
		// Set Overlay Position and Dimensions.
		positionOverlay(overlayHeight);
	}
	
	// Configure Course Description Overlay with JSONObject
	function configureCourseDescriptionOverlay(overlayJSON){
		
		// Determine Overlay Object
		var overlayObject = getCourseDescriptionOverlayObject(overlayJSON);
		
		// Determine Overlay Object Values
		var overlayHeaderMarkup = overlayObject.headerMarkup;
		var overlayDetailMarkup = overlayObject.detailMarkup;
		var overlayHeight = overlayObject.detailHeight;
		
		// Add Overlay Header Markup
		$('#overlay').find('#overlay-header').html(overlayHeaderMarkup);
		
		// Add Overlay Detail Makup
		$('#overlay').find('#overlay-details').append(overlayDetailMarkup);
		
		// Style added detail rows.
		$('#overlay-details').css('border', '1px solid #A8CAFE');
		
		// Set Overlay Position and Dimensions.
		positionOverlay(overlayHeight);
		
		// Stripe the rows of the overlay detail.
		$('#overlay-details').find('tr:odd').attr('class', 'overlay-row');
		$('#overlay-details').find('tr:even').attr('class', 'overlay-colored-row');
	}
	
	// Configure Course Schedule Overlay with JSONObject
	function configureCourseScheduleOverlay(overlayJSON){
		
		// Determine Overlay Object
		var overlayObject = getCourseScheduleOverlayObject(overlayJSON);
		
		// Determine Overlay Object Values
		var overlayHeaderMarkup = overlayObject.headerMarkup;
		var overlayDetailMarkup = overlayObject.detailMarkup;
		var overlayHeight = overlayObject.detailHeight;
		
		// Add Overlay Header Markup
		$('#overlay').find('#overlay-header').html(overlayHeaderMarkup);
		
		// Add Overlay Detail Makup
		$('#overlay').find('#overlay-details').append(overlayDetailMarkup);
		
		// Style added to Overlay
		$('#overlay-details').css('height', overlayHeight+'px');
		$('#overlay-details').css('background-color', '#FFFFFF');
		$('#overlay-details').css('border', '1px solid #A8CAFE');
		$('#overlay').css('height', (overlayHeight+35)+'px');
		
		// Style Last Row
		$('#overlay-details').find('tr:first').addClass('last-column-row').css('background-color', '#E6F2FD');
	
	}
	

	// OVERLAY CONFIGURE: END ------------------------------------
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	// TODO: Continue Commenting and Arranging Course Browser JS
	
	
	// COURSE BROWSER CRUMBS: -----------------------------------
	
	function updateBrowserCrumbs(){
		$('#course-browser-crumbs').html("<div id='crumb-title' class='crumb-title'>You are here: </div>");
		jQuery.each(groupDisplayState, function(index, value){
			var columnId = value.columnId;
			var cgViewId = value.cgViewId;
			var cgViewType = "course";
            var courseBrowserCrumbMarkup = "<div id='crumb-" + index + "' class='crumb'>" + value.cgViewName + "</div><div style='display: inline; text-decoration: none; padding-right:5px;'>></div>";
            $('#course-browser-crumbs').append(courseBrowserCrumbMarkup);
			$('#course-browser-crumbs').find('#crumb-'+index).click(function(){
				clickCourseGroup("group-"+columnId+"-"+cgViewId, cgViewType);
			});
		});
		$('#course-browser-crumbs').find("div:last").remove();
		$('#course-browser-crumbs').find("div:last").css('text-decoration', 'none');
		
	}
	
	//?
	// Populates Root Group Column
	function populateRootGroupColumn(rootCGViewsJSON){
		var rootGroupColumnId = 0;
		configureRootColumn(rootGroupColumnId, rootCGViewsJSON);
		//loadRootCourseGroupViewsColumn(rootGroupViewsJSON);
	}
	
	
	function getChildFromList(childId, cgViewList){
		var cgView = {};
		jQuery.each(cgViewList, function(index, value){
			var idd = value.cgView.id;			
			if(value.cgView.id == childId){
				cgView = value;
			}
		});
		return cgView;
	}
	
	function getCGViewChildCGView(childId, cgView){        
		if(cgView.children!=undefined){		
    		var cgViewChildren = cgView.children;
            var cgViewReturn = {};
            jQuery.each(cgViewChildren , function(index, value){
                if(value.cgView.id == childId){
                    cgViewReturn = value;
                }
            });
		}else{
			cgViewReturn = cgView[childId];
		}
        return cgViewReturn;
    }
    
    function getRootNodes(){
        var rootNodes = new Array();
        jQuery.each(courseGroupJSONObject.rootNodes, function(index, value){
                rootNodes.push(value);				
        });
        return rootNodes;
    }
	
    function getCGVChildren(cgView){
        var cgViewChildren = new Object();
        if(cgView.children!=undefined){
            cgViewChildren = cgView.children
        }else{
            cgViewChildren = null;
        }
        return cgViewChildren;
    }
	
	function getInnerSearchCGViews(childNodeId, testNodes){
        var cgViewResult = new Object();
        jQuery.each(testNodes, function(index, value){        
            if(value.cgView.id == childNodeId){
                cgViewResult = value.children;
            }
        });
        return cgViewResult;
    }
	
    function searchCourseGroupNodesJSON(searchList){		
        var defaultSearchCGViews = getRootNodes();		
        var innerSearchCGViews;
        var resultingCGView;    
		var searchListLength = searchList.length;        
        jQuery.each(searchList, function(columnId, groupId){
        	var searchSubjects;
			// This is the first column in the searchList.
			if(columnId == 0){                
                if(columnId+1 == searchListLength){	
				    resultingCGView = getChildFromList(groupId, defaultSearchCGViews);
                }else{				
					innerSearchCGViews =  getInnerSearchCGViews(groupId, defaultSearchCGViews);
				}		
            }else{
				// Search searchSubjects to innerSearchCGViews.
                searchSubjects = innerSearchCGViews;                
				// If this is not the last item in the searchList.
				if(columnId+1 < searchListLength){
                    innerSearchCGViews = getChildFromList(groupId, searchSubjects).children;					
                }else{
					// This is the last item
                    resultingCGView = getCGViewChildCGView(groupId, innerSearchCGViews);
                }
            }
        });
        return resultingCGView;
    }      
    
    function getGroupDisplayList(){
        var cgViewDisplayList = new Array();
        jQuery.each(groupDisplayState, function(index, value){
            cgViewDisplayList.push(parseInt(value.cgViewId));
        });
        return cgViewDisplayList;
    }
      
    function updateColumnUI(columnId){
    
        var test = $('div[id^="column-"]');
            jQuery.each(test, function(index, value){
                if(index > columnId){
                    $('#'+value.id).remove();
                }
            });  
        }
    	
    function updateObject(columnId, cgViewId, columnName){
        var totalDisplayCount = groupDisplayState.length+1;
        groupDisplayState.splice(columnId, totalDisplayCount);
        if(groupDisplayState[columnId]!=undefined){
            groupDisplayState[columnId].columnId  = columnId;
            groupDisplayState[columnId].cgViewId = cgViewId;
        }else{
            var stateObject = {
                columnId: columnId,
                cgViewId: cgViewId,
    			cgViewName: columnName
            }
            groupDisplayState[columnId] = stateObject;
        }
    }
    	
	
	
	
	
	function configureCurrentCGViewColumn(columnId, cgView){
		var cgViewId = cgView.cgView.id;
		if(currentCGView.children!=undefined){
    		var cgViewChildrenList = new Array();
    		jQuery.each(currentCGView.children, function(index, value){
    			cgViewChildrenList.push(value);			
    		});
    		if(cgViewChildrenList.length>0){
    			currentCGView.hasChildren = true;
				var childColumnId = parseInt(columnId) + 1;
    			loadChildColumn(childColumnId, currentCGView);
    		}else{
    			currentCGView.hasChildren = false;
    		}
		}else{
			//Course group view with no subgroups.");
		}
		updateBrowserCrumbs();	
	}
	
	function clickTrainingPlan(trainingPlanId){
	
	}

	function loadCurrentCGView(currentCGView, columnId){
		configureCurrentCGViewColumn((parseInt(columnId)), currentCGView);
		configureSelectionMessageColumn();
		
		var cgId = currentCGView.cgView.id;
		var isTrainingPlan= currentCGView.cgView.trainingPlan;
		var misc= currentCGView.cgView.misc;
		
		#set($getCourses = "/lrn_getCoursesByCourseGroups.do?action=getCoursesByCourseGroups&courseGroupId=cgId&isTrainingPlan=tId&isMiscellaneous=misc")

		var getCourses = "#springUrl(${getCourses})";
		
	    var courseGroupViewCourses;
		getCourses = getCourses.replace('cgId',cgId);
		
		if(currentCGView.cgView.trainingPlan == true){
			getCourses = getCourses.replace('tId',1);
		}
		else{
			getCourses = getCourses.replace('tId',0);
		}
		
		//Check for Miscellaneous
		if(currentCGView.cgView.misc == true){
			getCourses = getCourses.replace('misc',1);
		}
		else{
			getCourses = getCourses.replace('misc',0);
		}
		
		// Changed because of LMS-16021
		jQuery.ajax({
	    	  url: getCourses,
	          dataType: "json",
	          cache: false,
	          async: true,  
	          beforeSend: function(){
	          		_msg='$brander.getBrandElement("lms.learner.progressbar.availableCourses.loaded.message")';
	          		$('#process_text').html(_msg);	
	          		showProcessOverlay();
		       },
          	  success: function(coursesJSON) {
					courseGroupViewCourses = coursesJSON;

					// Configure Group View Courses Table if present, otherwise reset Course Table
					if((courseGroupViewCourses != null)&&(courseGroupViewCourses != '')){
						populateCourseTable(courseGroupViewCourses);
					}else{
						resetCourseTable();
					}
				
					// Resize, and position Course Group Browser.
					resizeGroupBrowser();
					scrollToGroup(columnId);
			},
				complete: function(){
					hideProcessOverlay();
			}
	   });
		//var courseGroupViewCourses = currentCGView.cgView.courses;
	
	}
	
	function getTrainingPlanNodes(){
		var trainingPlanNodes = null;
		jQuery.each(courseGroupJSONObject.rootNodes, function(index, value){
			if(value.cgView.groupName == "Training Plans"){
				trainingPlanNodes = value.children;
			}
		});
		return trainingPlanNodes;
	}
	
	
	function searchTrainingPlanNodesJSON(cgViewId){
		var cgView = null;
    	var trainingPlans = getTrainingPlanNodes();
        jQuery.each(trainingPlans, function(index, value){
			if(value.cgView.id == cgViewId){
                cgView = value;
            }
        });
		return cgView;
	}
	
	
	function getCurrentCGView(cgViewType, cgViewId){
		var cgView = null;
		if(cgViewType == "course"){
			cgView = searchCourseGroupNodesJSON(getGroupDisplayList());
		}else if(cgViewType == "training"){
			cgView = searchTrainingPlanNodesJSON(cgViewId);
		}else{
			// Handle other cases
		}
		return cgView;
	}
	
	// Handles Group Click Event.
	function clickCourseGroup(courseGroupId, cgViewType){		
		var cgViewId = (courseGroupId).split('-')[2];
		var columnName = $('#'+courseGroupId).parents("div").attr("id");
		var cgViewText = $("#"+courseGroupId).find("#browse-group-name").text();
		var columnId = (columnName).split('-')[1];
		var groupId = courseGroupId;
		
		// Update clicked columns selected row
		updateRowSelected(courseGroupId, columnName);
		//Update Course Group View Display State Object
		updateObject(columnId, cgViewId, cgViewText);
		//?
		updateColumnUI(columnId);
		
		// Returns the Course Group View Selected.
		currentCGView = getCurrentCGView(cgViewType, cgViewId);
		if(currentCGView != null){
			loadCurrentCGView(currentCGView, columnId);
		}else{
			//currentCGView is null;
		}
	}
	
	
	// Update Selected Row
	function updateRowSelected(groupId, columnName){
		$('#'+columnName).find('.browse-name-selected').attr('class','browse-name');
		$('#'+columnName).find('.icon-caret-selected').attr('class','icon-caret-disabled-right');
		$('#'+columnName).find('#'+groupId).find('#browse-group-name').attr('class', 'browse-name browse-name-selected');
		$('#'+columnName).find('#'+groupId).find('#selection-caret').attr('class', 'icon-caret-selected');
	}
	
	// Group Browser Scroll Functions
	function scrollToStart(){
		$("#browse-columns-container").animate({scrollLeft:"0"});
	}
	function scrollToEnd(){
		var groupBrowserWidth = $('#browse-columns-scroller').width();
		$("#browse-columns-container").animate({scrollLeft:"+="+groupBrowserWidth});
	}
	function scrollToGroup(index){
		var groupBrowserFocus = minimumColumnWidth * (index);
		$("#browse-columns-container").animate({scrollLeft:groupBrowserFocus});	
	}
	function scrollPreviousGroup(){
		//$("#browse-columns-container").animate({scrollLeft:"-=370"});
	}
	
	// Resize Group Browser 
	function resizeGroupBrowser(){
	
		var exposedColumnNum = $('.browse-column').size();
		var totalColumnWidth = ((exposedColumnNum * minimumColumnWidth) + (exposedColumnNum * 3));
		var totalTableWidth = $('#table-content').width();

		// Size each of the columns to the minimumColumnWidth.
		$('.browse-column').css("width", minimumColumnWidth+"px");
		// Size the Group Browser to the totalColumnWidth.
		$('#browse-columns-scroller').css("width", totalColumnWidth+"px")
		// Set Scrolling Properties
		
		
		//
		var containerHeight = 165;
		var browseColumnsContainerHeight = $('#browse-columns-container').height();
		var browseColumnHeight = $('.browse-column').height();
		
		//
		if(jQuery.browser.msie == true){
    		
			//
			if(totalColumnWidth >= totalTableWidth){
    			containerHeight = containerHeight + 2;	
    			$('#browse-columns-container').height(containerHeight);
    		}else{
    			containerHeight = containerHeight - 2;	
    			$('#browse-columns-container').height(containerHeight);
    		}
			
			//
			if($('#browse-columns-container').height() < 165){
				$('#browse-columns-container').height(150)
			}
		}else{
			$('#browse-columns-container').width($('#browse-content-heading').width());
			
			//console.log("Testing");
		}
		
		
		if(isBrowserIE6 == true){
			$('#browse-columns-container').find('div#selection-caret').css('padding-right', '15px');
		}
		
		
		
		$("#browse-columns-container").width(totalTableWidth);
		// Configure colored column rows.
		$('#browse-columns-scroller').find("tr:odd").attr('class', 'colored-row');
		$('#browse-columns-scroller').find("tr:even").attr('class', 'row');
		$('div[id^="column-"]').find("tr:last").addClass('last-column-row');
		//$('div[id^="column-"]').animate({scrollTop:0}, 100);
	}


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	// Manages the Group Display State JSON Object
	// This must be REMOVED!!!!!!!!!!!!!!!!!!!!!!!
	function updateGroupDisplayState(columnId, cgViewId){
		var maxGroupColumnDisplayed = groupDisplayState.length;
		var columnDisplayStateExists = false;
		jQuery.each(groupDisplayState, function(index, value){
			if(columnId == value.columnId){
				columnDisplayStateExists = true;
				if(groupDisplayState[columnId]!= undefined){
					var displayedColumnCount = $('div[id^="column-"]').length-1;
					var groupDisplayStateCount = groupDisplayState.length;
					if((displayedColumnCount - groupDisplayStateCount) >= 0){
					    var removeColumnCount = displayedColumnCount - groupDisplayStateCount;
					}
					// Remove irrelevent columns
					for(var i=0; i<removeColumnCount;i++){
					    var columnRemove = $('div[id^="column-"]').length-1;
						$('#column-'+columnRemove).remove();
					}
				}else{
					groupDisplayState[index].cgViewId = cgViewId;
					groupDisplayState[index].columnId = columnId;
				}
			}
		});
		
		// If displaying a new column add a columnDisplayState object to groupDisplayState.
		if(columnDisplayStateExists == false){
			var columnDisplayState = {
				columnId: columnId,
				cgViewId: cgViewId
			}
			groupDisplayState.push(columnDisplayState)	
		}

	}
	
	// Returns generic Selection Message
	function getGroupBrowserSelectionMessage(columnId){
		// TODO: Build conditional Selection Message Statements based on column, and/or row.
		var selectionMessage = "Selection";
		return selectionMessage;
	}
	

	
	// Build Course Row Icon
	function getBrandedCourseRowIcon(courseIcon){
		var courseIconPath = "";
		if(courseIcon == "lms.pixel.iconSelfPaced"){			
			courseIconPath = iconSelfpaced;
		}else if(courseIcon == "lms.pixel.iconOnlineSync"){		
			courseIconPath = iconInactiveVirtualClassroom;			
		}else if(courseIcon == "lms.pixel.iconOnlineAnimatedSync"){		
			courseIconPath = iconActiveVirtualClassroom;			
		}else if(courseIcon == "lms.pixel.iconDFC"){		
			courseIconPath = iconDiscussionForum;			
		}else if(courseIcon == "lms.pixel.iconWeblink"){		
			courseIconPath = iconWeblinkCourse;			
		}else if(courseIcon == "lms.pixel.iconOffineSync"){		
			courseIconPath = iconOfflineClassroom;			
		}
		return courseIconPath;
	}
	
	// Build Course Row Icon
	// Changed because of LMS-16020
	function getBrandedCourseRowIconByActualCourseTypeAsInDB(courseIcon){
		var courseIconPath = "";
		if(courseIcon == "Self Paced Course"){			
			courseIconPath = iconSelfpaced;
		}else if(courseIcon == "DFC"){					
			courseIconPath = iconDiscussionForum;	
		}else if(courseIcon == "Weblink"){			
			courseIconPath = iconWeblinkCourse;		
		}else if(courseIcon == "Scorm Course"){		
			courseIconPath = iconScormCourse;			
		}else if(courseIcon == "Legacy Course"){	
			courseIconPath = iconLegacyCourse;			
		}else if(courseIcon == "Learner Assignment"){	
			courseIconPath = iconhomeworkAssignMent;			
		}else{
			courseIconPath = iconOnlineGif;			
		}
		return courseIconPath;
	}
	
	// Get Course Icon By CourseType.
	function getCourseIconByType(courseType){
		var courseTypeIconPath = "";
		if((courseType == "Self Paced Course")||(courseType == "Scorm Course")){
			// Icon Self Paced Course Icon
			courseTypeIconPath = iconSelfpaced;
		}
		if(courseType == "$brander.getBrandElement("lms.instructor.addCourse.courseType.SYNC")" || courseType == "$brander.getBrandElement("lms.instructor.addCourse.courseType.WEBINAR")"){		
			// Inactive Synchronous Course Icon
			courseTypeIconPath = iconInactiveVirtualClassroom;			
		}
		if(courseType == "Active $brander.getBrandElement("lms.instructor.addCourse.courseType.SYNC")" || courseType == "Active $brander.getBrandElement("lms.instructor.addCourse.courseType.WEBINAR")"){		
			// Active Synchronous Course Icon
			courseTypeIconPath = iconActiveVirtualClassroom;
		}
		if(courseType == "DFC"){
			// Forum Course
			courseTypeIconPath = iconDiscussionForum;			
		}
		if(courseType == "Weblink"){		
			// Weblink Course
			courseTypeIconPath = iconWeblinkCourse;			
		}
		if(courseType == "Legacy Course"){		
			// Weblink Course
			courseTypeIconPath = iconSelfpaced;			
		}
		return courseTypeIconPath;
	}
	
	
	// COURSE TABLE: ------------------------------------
	
	// Resets Course Table to Default 
	function resetCourseTable(){
		$('#coursegroup-courses').find('tr[id^="row-"]').remove();
		$('#coursegroup-courses-title').html('Courses');
		var defaultCourseTableRowMarkup = "<tr id='row-selection' class='row'><td class='' colspan='2'><div>Select Course Group to view Courses.</div></td></tr>";
		$('#coursegroup-courses').append(defaultCourseTableRowMarkup);
	}
	
	function populateCourseTable(courseGroupCourses){
		
		// Empty Course Table Rows
		$('#coursegroup-courses').find('tr[id^="row-"]').remove();
		$('#coursegroup-courses-title').html(currentCGView.cgView.groupName + ' Courses');
		
		// Add Course Table Rows
		jQuery.each(courseGroupCourses, function(index, course){
		
			var courseId = course.courseId;
			var courseName = course.name;
			var courseEnrollmentId = course.enrollmentId;
			var courseEntitlementId = course.entitlementId;// May not need this value.
			var courseType = course.type;

			var courseDescriptionText = "Course Description";
			var courseDescriptionDiv = "<div id='course-description-" + courseId + "' style='display:inline; text-decoration:underline; cursor:pointer;'>" + courseDescriptionText + "</div>";
			var courseDescriptionTextMarkup = courseDescriptionDiv;
					
			// Handle Course Schedule for Synchronous Course.
			var courseScheduleText = "";
			var courseScheduleDiv = "";			
			var courseScheduleTextMarkup = "";			
			if(course.type == '$brander.getBrandElement("lms.instructor.addCourse.courseType.SYNC")' || course.type == '$brander.getBrandElement("lms.instructor.addCourse.courseType.WEBINAR")'){
				courseScheduleText = "View Schedule";
				courseScheduleDiv = "<div id='course-schedule" + courseId + "' style='display:inline; text-decoration:underline; cursor:pointer;'>" + courseScheduleText + "</div>";
				courseScheduleTextMarkup = " | " + courseScheduleDiv;
			}

			// Course Hours
			var courseDescriptionHours = "";
			var courseDescriptionHoursMarkup = "";
			/*if(course.courseHours != null){
				courseDescriptionHours = course.courseHours;
				courseDescriptionHoursMarkup = " | " + courseDescriptionHours + " Approved Course Hours ";
			}
			*/
			// Course Duration
			var courseDuration = "";
			var courseDurationMarkup = "";
			/*if(course.duration != null){
				courseDuration = course.duration;
				courseDurationMarkup = " | " + courseDuration + " Duration ";
			}
			*/
			// Determine Course Icon
			var courseIconToShow = getBrandedCourseRowIconByActualCourseTypeAsInDB(courseType);
			// Determine Course Table Row
			var courseRowMarkup = "<tr id='row-" + index+ "'><td width='31' class=''><img src='" + courseIconToShow + "' class='icon' alt=''></td><td width='100%' class='' ><div id='course-title-" + index + "' style='display:inline; text-decoration:underline; cursor:pointer;'>" + courseName + "</div><br><div class='course-info-text'>" + courseDescriptionTextMarkup + " " + courseScheduleTextMarkup + " " + courseDescriptionHoursMarkup + " " +courseDurationMarkup+ "</div></td></tr>";
			// Add Course Table Row
			$('#coursegroup-courses').append(courseRowMarkup);			

			
			
			// Add Course Description Overlay Popup Click Event
			$('#row-' + index).find('#course-description-'+courseId).click(function(){
				closeOverlay();
				openCourseDescriptionOverlay(courseId, courseEnrollmentId);
			});
			
			
			// If Synchronous Course Add Schedule Overlay Popup Click Event
			if(course.type == '$brander.getBrandElement("lms.instructor.addCourse.courseType.SYNC")' || course.type == '$brander.getBrandElement("lms.instructor.addCourse.courseType.WEBINAR")'){
    			$('#row-' + index).find('#course-schedule'+courseId).click(function(){
    				closeOverlay();
					openCourseScheduleOverlay(courseId, courseEnrollmentId);
    			});
			}
			
			
			// Course EnrollmentId Exists			
			if(parseInt(courseEnrollmentId)!=0){
				// Add Self Enroll Link
    			$('#course-title-' + index).click(function(){
					if(courseId!=""){   
						// Launch Course with courseId and courseEnrollmentId
						launchCourse(courseId, courseEnrollmentId,course.type);						
    				}else{
						// TODO: Handle empty courseId with enrollmentId present.
					}
    			});
				
			// Course EnrollmentId Does not Exist
			}else{
				// Add Course Launch Link
				$('#course-title-' + index).click(function(){
					if(courseId!=""){
						//Self Enroll if the courseId is present, and the enrollmentId is not.
						selfEnroll(courseId,course.type);
    				}else{
						// TODO: Handle empty enrollmentId and courseId.
					}
				});
			}
		});
		
		// Style Striped Course Table Rows
		$('#coursegroup-courses').find("tr:odd").attr('class', 'course-row');
		$('#coursegroup-courses').find("tr:even").attr('class', 'course-colored-row');
	}

	
	function configureRootCGViewColumn(columnId, rootCGViewsJSON){
    	// Create the Course Group View Column
		createGroupBrowserColumn(columnId);
    	
		// Create Course Group View Children Rows
		jQuery.each(rootCGViewsJSON, function(index, view){
			var cgViewId = view.cgView.id;
			var cgViewDepth = view.depth;
			var cgViewParentId = view.parentid;
			var cgViewName = view.cgView.groupName;
    		var cgViewHasChildren = false;
			var cgViewTrainingPlan = view.cgView.trainingPlan;
			
            // Determine if Course Group View has Children.
			jQuery.each(view.children, function(id, value){
				cgViewHasChildren = true;
            });		
            
			if(cgViewTrainingPlan == true){
				cgViewType = "training";
			}else{
				cgViewType = "course";
			}
			
			//createTrainingPlanColumnRow();
            // Create Course Group View Row
			createColumnRow(cgViewId, cgViewDepth, cgViewName, cgViewParentId, cgViewHasChildren, cgViewType);	
			
		});
	}
	
	function configureGroupBrowserColumn(columnId, cgView){
		// Create Course Group View Column
		createGroupBrowserColumn(columnId);
		
		//Create Course Group View Children Rows
    	jQuery.each(cgView.children, function(cgViewsIndex, view){
			var cgViewId = view.cgView.id;			
			var cgViewDepth = view.depth;
			var cgViewParentId = view.parentid;
			var cgViewName = view.cgView.groupName;	// We are refering to a coursegroupview with the same name as a value of the object.(cgView)
			var cgViewHasChildren = false;
            var cgViewTrainingPlan = view.cgView.trainingPlan;
			
			// Determine if Course Group View has Children.
			jQuery.each(view.children, function(id, value){
                cgViewHasChildren = true;
            });
			
			if(cgViewTrainingPlan == true){
				cgViewType = "training";
			}else{
				cgViewType = "course";
			}
            
			// Create Course Group View Row
			createColumnRow(cgViewId, cgViewDepth, cgViewName, cgViewParentId, cgViewHasChildren, cgViewType);	
			
		});
	}
	
	
	// Create and Append new Column
	function createGroupBrowserColumn(columnId){
		var groupBrowserColumnMarkup = "<div id='column-"+columnId+"' class='browse-column' style='width:"+minimumColumnWidth+"'><table id='table-browse' class='browse-content-table' style='border:0; margin-bottom:0;' border='0' cellpadding='0' cellspacing='0' width='100%'></table></div>";
		// Add Browser Column
		$('#browse-columns-scroller').append(groupBrowserColumnMarkup);
	}
	
	// Remove Group Browser Column
	function removeGroupBrowserColumn(columnId){
		// Check for selection-message column.
		if($('div[id^="column-'+columnId)){
			// Remove selection-message column, if it exists.
			$('div[id^="column-'+columnId).remove();
		}	
	}
	
	// Create and Append new Column Row
	function createColumnRow(cgViewId, cgViewDepth, cgViewName, cgViewParentId, cgViewHasChildren, cgViewType){
		//
		if(cgViewParentId==undefined){
			cgViewParentId = 0;
			cgViewDepth = 0;
		}
		
		// Determine Course Group View Row Child Indicator
		var childIndicationMarkup = "";
		if(cgViewHasChildren){
			childIndicationMarkup = "<div id='selection-caret' class='icon-caret-disabled-right'></div>";
		}
		
		// Determine Course Group View Row Markup
		var groupRowMarkup = "<tr><td id='group-" + cgViewDepth + "-" + cgViewId + "' style='cursor:pointer;'><div id='browse-group-name' class='browse-name'>"+cgViewName+"</div>"+ childIndicationMarkup + "</td></tr>";		
		
		// Create Course Group Row
		$('#column-'+cgViewDepth).find('#table-browse').append(groupRowMarkup);	
		
		// Add Click Event to Course Group View Row
		$('#group-'+cgViewDepth+"-"+cgViewId).click(function() {
        	clickCourseGroup("group-"+cgViewDepth+"-"+cgViewId, cgViewType);
        });
	}
	
	// Create and Append Selection Message Column
	function createSelectionMessageColumn(){
		// Configure Selection Message based on the Current Course Group View.
		var selectionMessage = "";
		// If Current Course Group View been defined.
		if(currentCGView.children!=undefined){
			if(currentCGView.hasChildren){				
				// If the Current Course Group View has children.
				selectionMessage = "Select a sub-group from the course group.";
			}else{
				// If the Current Course Group View does not have children.
				selectionMessage = "Select a course from the course group below.";
			}
		}else{
			selectionMessage = "Select a course group.";
		}
		// Create Selection Message Markup
		var selectionMessageMarkup = "<div id='selection-message' class='browse-column'><div class='selection-message'>"+selectionMessage+"</div></div>";
		// Create Selection Message Column
		$('#browse-columns-scroller').append(selectionMessageMarkup);
	}
	
	// Configure Selection Message Column
	function configureSelectionMessageColumn(){		
		// Reset Selection Message
		removeSelectionMessage();		
		// Create and Append Selection Message Column
		createSelectionMessageColumn();
		// Resize for column change.
		resizeGroupBrowser();
		// Scroll to Selection Message Column
		//scrollToEnd();
	}
	
	// Configure New Column and Selection Message
	function configureRootColumn(columnId, rootCGViewsJSON){
		// Removes Group Browser Columns >= new column position.
		removeGroupBrowserColumn(columnId);	
		// Creates and Appends Course Group View Column
		configureRootCGViewColumn(columnId, rootCGViewsJSON);
		// Configures Selection Message Column
		configureSelectionMessageColumn();
	}
	
	// ?Load Child Column based on Group Clicked by the user.
	function loadChildColumn(childColumnId, courseGroupViews){
		configureGroupBrowserColumn(childColumnId, courseGroupViews);
	}
	
	// Remove Selection Message
	function removeSelectionMessage(){
		// Check for selection-message column.
		if($('#selection-message')){
			// Remove selection-message column, if it exists.
			$('#selection-message').remove();
		}	
	}
	
</script>

	<div id="course-browser-crumbs" style="display:inline; padding-left:10px;"></div>
	<table id="table-content" border="0" cellpadding="0" cellspacing="0">
		<tr>
			<td>

				<!-- Browse Content Table : Start -->
				<table class="browse-content-table" border="0" cellpadding="0" cellspacing="0" width="100%" style="table-layout: fixed;">
					
					<!-- Browse Content Table Heading: Start -->
					<tr id="browse-content-heading">
						<td class="browse-content-table-header">
    						<div class="browse-content-table-heading">
    							<div style="display:inline;">
									Browse Course Groups
								</div>    							
    						</div>
						</td>
					</tr>
					<!-- Browse Content Table Heading: End -->					
					
					<!-- Browse Content Scroller : Start -->
					<tr>
						<td style="padding:0;" nowrap>
							<div id="browse-columns-container" style="overflow-x:auto;">
								<div id="browse-columns-scroller">									
								</div>
							</div>
						</td>
					</tr>
					<!-- Browse Content Scroller : End -->

				</table>
				<!-- Browse Content Table : End -->

			</td>
		</tr>
	</table>
	
	
	
	
	<table id="coursegroup-courses" cellspacing="0" cellpadding="0" border="0" width="100%" class="browse-content-table">
		<tr>
            <td class="browse-content-table-header" colspan="2" style="height:30px;">
                <div id="coursegroup-courses-title" class="browse-content-table-heading">Courses</div>
            </td>
        </tr>
		<tr class="row" id="row-selection">
			<td colspan="2" class="">
				<div>Select Course Group to view Courses.</div>
			</td>
		</tr>
    </table>				


	<div id="fadeout-container"></div>	

    <div id="overlay" style="display:none;">
        <table border="0" cellpadding="0" cellspacing="0" width="100%">
            <tr>
                <td>
                    <div id="overlay-header"></div>
                    <div id="overlay-close">Close</div>
                </td>
            </tr>
            <tr>
                <td>
                    <div id="overlay-details">       
                    </div>
                </td>
            </tr>
        </table>
    </div>
