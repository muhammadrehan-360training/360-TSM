package com.softech.vu360.lms.web.controller.manager;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.validation.BindException;import org.springframework.validation.Errors;import org.springframework.web.servlet.ModelAndView;import com.softech.vu360.lms.model.Alert;import com.softech.vu360.lms.model.EmailAddress;import com.softech.vu360.lms.model.EmailAddressAlertRecipient;import com.softech.vu360.lms.model.Learner;import com.softech.vu360.lms.model.LearnerAlertRecipient;import com.softech.vu360.lms.model.LearnerGroup;import com.softech.vu360.lms.model.LearnerGroupAlertRecipient;import com.softech.vu360.lms.model.OrgGroupAlertRecipient;import com.softech.vu360.lms.model.OrganizationalGroup;import com.softech.vu360.lms.model.VU360User;import com.softech.vu360.lms.service.LearnerService;import com.softech.vu360.lms.service.OrgGroupLearnerGroupService;import com.softech.vu360.lms.service.SurveyService;import com.softech.vu360.lms.service.VU360UserService;import com.softech.vu360.lms.web.controller.AbstractWizardFormController;import com.softech.vu360.lms.web.controller.model.CourseEntitlementItem;import com.softech.vu360.lms.web.controller.model.LearnerGroupEnrollmentItem;import com.softech.vu360.lms.web.controller.model.RecipientForm;import com.softech.vu360.lms.web.controller.validator.AddRecipientValidator;import com.softech.vu360.lms.web.filter.AdminSearchType;import com.softech.vu360.lms.web.filter.VU360UserAuthenticationDetails;import com.softech.vu360.lms.web.filter.VU360UserMode;import com.softech.vu360.util.ArrangeOrgGroupTree;import com.softech.vu360.util.TreeNode;public class AddRecipientWizardController extends AbstractWizardFormController{	private SurveyService surveyService = null;	private Logger log = Logger.getLogger(AddRecipientWizardController.class.getName());	private String finishTemplate = null;	private static final String LEARNERS = "learners";	private static final String LEARNER_GROUPS = "learnergroups";	private static final String ORGANIZATION_GROUPS = "organizationgroups";	private static final String EMAIL_ADDRESS = "emailaddress";	private static final int SEARCH_COURSE_PAGE_SIZE = 10;	private OrgGroupLearnerGroupService orgGroupLearnerGroupService;	private VU360UserService vu360UserService;	private LearnerService learnerService;	public AddRecipientWizardController(){		super();		setCommandName("addRecipientForm");		setCommandClass(RecipientForm.class);		setSessionForm(true);		this.setBindOnNewForm(true);		setPages(new String[] {				"manager/userGroups/survey/manageAlert/manageRecipient/addRecipient/step1"				,"manager/userGroups/survey/manageAlert/manageRecipient/addRecipient/step2"				,"manager/userGroups/survey/manageAlert/manageRecipient/addRecipient/mgr_addRecipient_learner"				,"manager/userGroups/survey/manageAlert/manageRecipient/addRecipient/mgr_addRecipient_learnerGroup"				,"manager/userGroups/survey/manageAlert/manageRecipient/addRecipient/mgr_addRecipient_ organization_Groups  "				,"manager/userGroups/survey/manageAlert/manageRecipient/addRecipient/mgr_addRecipient_emailAddress"				,"manager/userGroups/survey/manageAlert/manageRecipient/addRecipient/mgr_addRecipient_learner1"		});	}	protected Object formBackingObject(HttpServletRequest request) throws Exception {		log.debug("IN formBackingObject");		Object command = super.formBackingObject(request);		try{			RecipientForm enrollmentDetails = (RecipientForm)command;			String alertId = request.getParameter("alertId");			enrollmentDetails.setAlertId(Long.parseLong(alertId));			enrollmentDetails.setCourseSearchResultsPageSize(SEARCH_COURSE_PAGE_SIZE);			VU360User vu360UserModel = null;			VU360UserAuthenticationDetails details = (VU360UserAuthenticationDetails) (SecurityContextHolder.getContext().getAuthentication()).getDetails();			com.softech.vu360.lms.vo.Customer customerVO = null;						if(details.getCurrentMode().equals(VU360UserMode.ROLE_LMSADMINISTRATOR)) {				customerVO = (com.softech.vu360.lms.vo.Customer) request.getSession(true).getAttribute("adminSelectedCustomer");				com.softech.vu360.lms.vo.Distributor distributorvo = (com.softech.vu360.lms.vo.Distributor) request.getSession(true).getAttribute("adminSelectedDistributor");				if(customerVO != null) {					Long learnerId = learnerService.getLearnerForSelectedCustomer(customerVO.getId());					vu360UserModel = learnerService.getLearnerByID(learnerId.longValue()).getVu360User();				}else if(distributorvo != null) {					Long learnerId = learnerService.getLearnerForSelectDistributor(distributorvo.getMyCustomer().getId());					vu360UserModel = learnerService.getLearnerByID(learnerId).getVu360User();				} else {					vu360UserModel = VU360UserAuthenticationDetails.getCurrentUser();				}			} else if(details.getCurrentMode().equals(VU360UserMode.ROLE_TRAININGADMINISTRATOR)) {				vu360UserModel = VU360UserAuthenticationDetails.getCurrentUser();			}			List <LearnerGroup> selectedLearnerGroupsAssociatedWithOrgGroup = new ArrayList<LearnerGroup>();			selectedLearnerGroupsAssociatedWithOrgGroup.addAll(orgGroupLearnerGroupService.getAllLearnerGroups(customerVO.getId(),vu360UserModel));			List<LearnerGroupEnrollmentItem> learnerGroupList = new ArrayList <LearnerGroupEnrollmentItem>();			for(int learnerGroupNo=0; learnerGroupNo<selectedLearnerGroupsAssociatedWithOrgGroup.size(); learnerGroupNo++) {				LearnerGroup lgrp = selectedLearnerGroupsAssociatedWithOrgGroup.get(learnerGroupNo);				LearnerGroupEnrollmentItem item = new LearnerGroupEnrollmentItem(); 				item.setLearnerGroupId(lgrp.getId());				item.setLearnerGroupName(lgrp.getName());				item.setSelected(false);				learnerGroupList.add(item);			}			enrollmentDetails.setLearnerGroupEnrollmentItems(learnerGroupList);			List<CourseEntitlementItem> courseEntitlements =  new ArrayList<CourseEntitlementItem>();			enrollmentDetails.setCourseEntitlementItems(courseEntitlements);		}catch (Exception e) {			log.debug("exception", e);		}		return command;	}	protected ModelAndView processFinish(HttpServletRequest request,HttpServletResponse arg1, Object command, BindException arg3)throws Exception {		RecipientForm form =(RecipientForm)command;		Long alertId = form.getAlertId();		Alert alert = surveyService.getAlertByID(alertId);		if(form.getRecipientType().equalsIgnoreCase(LEARNERS)){			LearnerAlertRecipient learnerAlertRecipient=new LearnerAlertRecipient();			learnerAlertRecipient.setAlertRecipientGroupName(form.getRecipientGroupName());			learnerAlertRecipient.setLearners(form.getLearnerss());			learnerAlertRecipient.setAlert(alert);			surveyService.addAlertRecipient(learnerAlertRecipient);		}		if(form.getRecipientType().equalsIgnoreCase(LEARNER_GROUPS)){			LearnerGroupAlertRecipient learnerGroupAlertRecipient=new LearnerGroupAlertRecipient();			learnerGroupAlertRecipient.setAlertRecipientGroupName(form.getRecipientGroupName());			learnerGroupAlertRecipient.setLearnerGroups(form.getSelectedLearnerGroupList());			learnerGroupAlertRecipient.setAlert(alert);			surveyService.addAlertRecipient(learnerGroupAlertRecipient);		}		if(form.getRecipientType().equalsIgnoreCase(ORGANIZATION_GROUPS)){			OrgGroupAlertRecipient organizationalGroupAlertRecipient=new OrgGroupAlertRecipient();			organizationalGroupAlertRecipient.setAlertRecipientGroupName(form.getRecipientGroupName());			organizationalGroupAlertRecipient.setOrganizationalGroups(form.getSelectedOrgGroupList());			organizationalGroupAlertRecipient.setAlert(alert);			surveyService.addAlertRecipient(organizationalGroupAlertRecipient);		}		if(form.getRecipientType().equalsIgnoreCase(EMAIL_ADDRESS)){			EmailAddressAlertRecipient emailAddressAlertRecipient =new EmailAddressAlertRecipient();			emailAddressAlertRecipient.setAlertRecipientGroupName(form.getRecipientGroupName());			emailAddressAlertRecipient.setEmailAddress(form.getEmailAddressList());			emailAddressAlertRecipient.setAlert(alert);			surveyService.addAlertRecipient(emailAddressAlertRecipient);		}		return new ModelAndView(finishTemplate);	}	protected ModelAndView processCancel(HttpServletRequest request, HttpServletResponse response, Object command, BindException error) throws Exception {		log.debug("IN processCancel");		return new ModelAndView(finishTemplate);	}	protected void onBindAndValidate(HttpServletRequest request,			Object command, BindException errors, int page) throws Exception {		RecipientForm form = (RecipientForm) command;		if(request.getParameter("search") != null) {			form.setAction(request.getParameter("search"));		} else {			form.setAction("");		}		super.onBindAndValidate(request, command, errors, page);	}	protected void postProcessPage(HttpServletRequest request, Object command,			Errors errors,int currentPage) throws Exception {		RecipientForm addRecipientForm = (RecipientForm)command;		log.debug("in GET TARGET PAGE...."+currentPage);		String firstName=request.getParameter("firstName");		String lastName=request.getParameter("lastName");		String email=request.getParameter("email");		VU360User vu360UserModel = null;		com.softech.vu360.lms.vo.Customer customerVO = null;		com.softech.vu360.lms.vo.Distributor distributorvo = null;		Authentication auth = SecurityContextHolder.getContext().getAuthentication();		VU360UserAuthenticationDetails details = (VU360UserAuthenticationDetails)auth.getDetails(); 		List<VU360User> users= null;		if(!StringUtils.isEmpty(request.getParameter("search"))&& request.getParameter("search").equalsIgnoreCase("search")) {			addRecipientForm.setAction("search");		}				if(details.getCurrentMode().equals(VU360UserMode.ROLE_LMSADMINISTRATOR)) {			customerVO = (com.softech.vu360.lms.vo.Customer) request.getSession(true).getAttribute("adminSelectedCustomer");			distributorvo = (com.softech.vu360.lms.vo.Distributor) request.getSession(true).getAttribute("adminSelectedDistributor");			if(customerVO != null) {				Long learnerId = learnerService.getLearnerForSelectedCustomer(customerVO.getId());				vu360UserModel = learnerService.getLearnerByID(learnerId.longValue()).getVu360User();			}else if(distributorvo != null) {				Long learnerId = learnerService.getLearnerForSelectDistributor(distributorvo.getMyCustomer().getId());				vu360UserModel = learnerService.getLearnerByID(learnerId).getVu360User();			} else {				vu360UserModel = VU360UserAuthenticationDetails.getCurrentUser();			}		} else if(details.getCurrentMode().equals(VU360UserMode.ROLE_TRAININGADMINISTRATOR)) {			vu360UserModel = VU360UserAuthenticationDetails.getCurrentUser();		}				if(currentPage==2 && addRecipientForm.getAction().equalsIgnoreCase("search")) {			if( details.getCurrentCustomer() != null && details.getCurrentSearchType()==AdminSearchType.DISTRIBUTOR){						Map<Object,Object> results = new HashMap<Object,Object>();				results = learnerService.findAllLearnersOfCustomersOfReseller(firstName, lastName, email, 1, -1, "firstName", 0, null);				 users = (List<VU360User>)results.get("list");			} else if(details.getProxyLearner() != null && details.getCurrentSearchType() == AdminSearchType.LEARNER) {				VU360User user = learnerService.getLearnerByID(details.getProxyLearner().getId()).getVu360User();				users = new ArrayList<VU360User>();				users.add(user); 			} else {				users = learnerService.findLearner(firstName, lastName, email, 						vu360UserService.hasAdministratorRole(vu360UserModel), vu360UserService.hasTrainingAdministratorRole(vu360UserModel), vu360UserModel.getTrainingAdministrator().getId(), 						vu360UserModel.getTrainingAdministrator().isManagesAllOrganizationalGroups(), vu360UserModel.getTrainingAdministrator().getManagedGroups(), 						vu360UserModel.getLearner().getCustomer().getId(), vu360UserModel.getId());				addRecipientForm.setAction("");			}			addRecipientForm.setLearnerListFromDB(users);		}				int i=0, j=0;		VU360User item0;		String selecteditem0;		List<Learner> learnerss = new ArrayList<Learner>();		if(currentPage==2 && this.getTargetPage(request, currentPage)==6 && addRecipientForm.getSelectedLearner()!=null){			addRecipientForm.setPageIndex("2");			if(addRecipientForm.getSelectedLearner()!=null)				for(;i<addRecipientForm.getLearnerListFromDB().size();){					item0 = addRecipientForm.getLearnerListFromDB().get(i);					for(;j<addRecipientForm.getSelectedLearner().length;){						selecteditem0 = (addRecipientForm.getSelectedLearner())[j];						if(item0 != null){							if(item0.getId()==(Long.parseLong(selecteditem0))){								learnerss.add(item0.getLearner());								break;							}						}						j++;					}					j=0;					i++;				}	    }		addRecipientForm.setLearnerss(learnerss);				if(request.getParameter("search") != null && request.getParameter("search").equals("search")) {			if(addRecipientForm.getLearnerss().isEmpty() || addRecipientForm.getLearnerss() == null) 				request.setAttribute("newPage", "true");		}		i=0; j=0;		LearnerGroup item;		String selecteditem;		List<LearnerGroup> selectedLearnerGroupList =  new ArrayList<LearnerGroup>();		if(addRecipientForm.getLearnerGroup()!=null)			for(;i<addRecipientForm.getLearnerGroupListFromDB().size();){				item = addRecipientForm.getLearnerGroupListFromDB().get(i);				for(;j<addRecipientForm.getLearnerGroup().length;){					selecteditem = (addRecipientForm.getLearnerGroup())[j];					if(item != null){						if(item.getId()==(Long.parseLong(selecteditem))){							//addRecipientForm.getSelectedLearnerGroupList().add(item);							selectedLearnerGroupList.add(item);							break;						}					}					j++;				}				j=0;				i++;			}		addRecipientForm.setSelectedLearnerGroupList(selectedLearnerGroupList);		i=0;		j=0;		OrganizationalGroup orgitem;		String orgselecteditem;		List<OrganizationalGroup> selectedOrgGroupList =  new ArrayList<OrganizationalGroup>();		if(addRecipientForm.getOrgGroup()!=null)			for(;i<addRecipientForm.getOrgGroupListFromDB().size();){				orgitem = addRecipientForm.getOrgGroupListFromDB().get(i);				for(;j<addRecipientForm.getOrgGroup().length;){					orgselecteditem = (addRecipientForm.getOrgGroup())[j];					if(orgitem != null){						if(orgitem.getId().compareTo((Long.parseLong(orgselecteditem))) == 0){							selectedOrgGroupList.add(orgitem);							break;						}}					j++;				}				j=0;				i++;			}		addRecipientForm.setSelectedOrgGroupList(selectedOrgGroupList);		String emailitem;		j=0;		if(currentPage==5 && this.getTargetPage(request, currentPage)==6){			if(addRecipientForm.getEmailAddress()!=null)				for(;j<addRecipientForm.getEmailAddress().length;)				{					emailitem = (addRecipientForm.getEmailAddress())[j];					EmailAddress emailAddress =  new EmailAddress();					emailAddress.setEmail(emailitem);					addRecipientForm.getEmailAddressList().add(emailAddress);					j++;				}}		super.postProcessPage(request, command, errors, currentPage);	}	protected Map referenceData(HttpServletRequest request, Object command,	Errors errors, int page) throws Exception {		log.debug("IN referenceData");		Map model = new HashMap();		RecipientForm form = (RecipientForm)command;		switch(page){		case 0:			break;		case 2:			break;		case 3:			break;		case 4:			VU360User vu360UserModel = null;			VU360UserAuthenticationDetails details = (VU360UserAuthenticationDetails) (SecurityContextHolder.getContext().getAuthentication()).getDetails();						Long customerId = 0L;			com.softech.vu360.lms.vo.Customer customer = null;			com.softech.vu360.lms.vo.Distributor distributor = null;			if(details.getCurrentMode().equals(VU360UserMode.ROLE_LMSADMINISTRATOR)) {				customer = (com.softech.vu360.lms.vo.Customer) request.getSession(true).getAttribute("adminSelectedCustomer");				distributor = (com.softech.vu360.lms.vo.Distributor) request.getSession(true).getAttribute("adminSelectedDistributor");				if(customer != null) {					customerId = customer.getId();					Long learnerId = learnerService.getLearnerForSelectedCustomer(customer.getId());					vu360UserModel = learnerService.getLearnerByID(learnerId.longValue()).getVu360User();				}else if(distributor != null) {					Long learnerId = learnerService.getLearnerForSelectDistributor(distributor.getMyCustomer().getId());					vu360UserModel = learnerService.getLearnerByID(learnerId).getVu360User();				} else {					vu360UserModel = VU360UserAuthenticationDetails.getCurrentUser();				}			} else if(details.getCurrentMode().equals(VU360UserMode.ROLE_TRAININGADMINISTRATOR)) {				vu360UserModel = VU360UserAuthenticationDetails.getCurrentUser();				customerId = vu360UserModel.getLearner().getCustomer().getId();			}			OrganizationalGroup rootOrgGroup = orgGroupLearnerGroupService.getRootOrgGroupForCustomer(customerId);			String[] orgGroupList = form.getOrgGroup();			List<Long> orgGroupIdList = new ArrayList<Long>();			if(orgGroupList!=null && orgGroupList.length>0){				for(String orgGroup:orgGroupList){					Long orgGroupId = Long.parseLong(orgGroup);					orgGroupIdList.add(orgGroupId);				}			}			TreeNode orgGroupRoot  = ArrangeOrgGroupTree.getOrgGroupTree(null, rootOrgGroup,orgGroupIdList,vu360UserModel);			List<TreeNode> treeAsList = orgGroupRoot.bfs();			model.put("orgGroupTreeAsList", treeAsList);			return model;		case 5:			break;		case 6:			break;		default:			break;		}		return super.referenceData(request, command, errors, page);	}	protected void validatePage(Object command, Errors errors, int page, boolean finish) {		AddRecipientValidator validator = (AddRecipientValidator)this.getValidator();		RecipientForm form = (RecipientForm)command;		switch(page){		case 0:			validator.validateFirstPage(form, errors);			break;		case 1:			break;		case 2:			if(!form.getAction().equalsIgnoreCase("search")) {				if(form.getRecipientType().equalsIgnoreCase(LEARNERS))					validator.validateLearnerSelectPage(form, errors);			}			break;		case 3:			break;		case 4:			if(form.getRecipientType().equals(ORGANIZATION_GROUPS)) {				validator.validateOrganizationGroups(form, errors);			}			break;		case 5:			validator.validateEmailPage(form, errors);			break;		case 6:			break;		default:			break;		}		super.validatePage(command, errors, page, finish);	}	protected int getTargetPage(HttpServletRequest request, Object command, Errors errors, int currentPage) {		VU360User vu360UserModel = null;				RecipientForm addRecipientForm = (RecipientForm)command;		log.debug("in GET TARGET PAGE...."+currentPage);				VU360UserAuthenticationDetails details = (VU360UserAuthenticationDetails) (SecurityContextHolder.getContext().getAuthentication()).getDetails();				if(details.getCurrentMode().equals(VU360UserMode.ROLE_LMSADMINISTRATOR)) {			com.softech.vu360.lms.vo.Customer customerVO = (com.softech.vu360.lms.vo.Customer) request.getSession(true).getAttribute("adminSelectedCustomer");			com.softech.vu360.lms.vo.Distributor distributorvo = (com.softech.vu360.lms.vo.Distributor) request.getSession(true).getAttribute("adminSelectedDistributor");			if(customerVO != null) {				Long learnerId = learnerService.getLearnerForSelectedCustomer(customerVO.getId());				vu360UserModel = learnerService.getLearnerByID(learnerId.longValue()).getVu360User();			}else if(distributorvo != null) {				Long learnerId = learnerService.getLearnerForSelectDistributor(distributorvo.getMyCustomer().getId());				vu360UserModel = learnerService.getLearnerByID(learnerId).getVu360User();			} else {				vu360UserModel = VU360UserAuthenticationDetails.getCurrentUser();			}		} else if(details.getCurrentMode().equals(VU360UserMode.ROLE_TRAININGADMINISTRATOR)) {			vu360UserModel = VU360UserAuthenticationDetails.getCurrentUser();		}		if(currentPage==1 && this.getTargetPage(request, currentPage) != 0){			if (addRecipientForm.getRecipientType().equals(LEARNERS)){				addRecipientForm.setPageIndex("2");					String firstName=request.getParameter("firstName");				String lastName=request.getParameter("lastName");				String email=request.getParameter("email");				List<VU360User> users = null;				if(request.getParameter("search") != null){					if(request.getParameter("search").equalsIgnoreCase("doSearch")){						users = learnerService.findLearner(firstName, lastName, email, 								vu360UserService.hasAdministratorRole(vu360UserModel), vu360UserService.hasTrainingAdministratorRole(vu360UserModel), vu360UserModel.getTrainingAdministrator().getId(), 								vu360UserModel.getTrainingAdministrator().isManagesAllOrganizationalGroups(), vu360UserModel.getTrainingAdministrator().getManagedGroups(), 								vu360UserModel.getLearner().getCustomer().getId(), vu360UserModel.getId());						addRecipientForm.setLearnerListFromDB(users);					}				}				else{					addRecipientForm.setLearnerListFromDB(users);				}				return 2;			}			else if (addRecipientForm.getRecipientType().equals(LEARNER_GROUPS)){				addRecipientForm.setPageIndex("3");				List<LearnerGroup> learnerGroups = orgGroupLearnerGroupService.getAllLearnerGroups(vu360UserModel.getLearner().getCustomer().getId(), vu360UserModel);				addRecipientForm.setLearnerGroupListFromDB(learnerGroups);				return 3;			}			else if (addRecipientForm.getRecipientType().equals(ORGANIZATION_GROUPS)){				addRecipientForm.setPageIndex("4");				List<OrganizationalGroup> orgGroup = orgGroupLearnerGroupService.getAllOrganizationalGroups(vu360UserModel.getLearner().getCustomer().getId());				addRecipientForm.setOrgGroupListFromDB(orgGroup);				return 4;			}			else if (addRecipientForm.getRecipientType().equals(EMAIL_ADDRESS)){				addRecipientForm.setPageIndex("5");				addRecipientForm.setEmailAddressAlertRecipient(new EmailAddressAlertRecipient());				return 5;			}				}		return super.getTargetPage(request, command, errors, currentPage);	}	public String getFinishTemplate() {		return finishTemplate;	}	public void setFinishTemplate(String finishTemplate) {		this.finishTemplate = finishTemplate;	}	public static String getLEARNERS() {		return LEARNERS;	}	public static String getLEARNER_GROUPS() {		return LEARNER_GROUPS;	}	public static String getORGANIZATION_GROUPS() {		return ORGANIZATION_GROUPS;	}	public static String getEMAIL_ADDRESS() {		return EMAIL_ADDRESS;	}	public SurveyService getSurveyService() {		return surveyService;	}	public void setSurveyService(SurveyService surveyService) {		this.surveyService = surveyService;	}	public OrgGroupLearnerGroupService getOrgGroupLearnerGroupService() {		return orgGroupLearnerGroupService;	}	public void setOrgGroupLearnerGroupService(			OrgGroupLearnerGroupService orgGroupLearnerGroupService) {		this.orgGroupLearnerGroupService = orgGroupLearnerGroupService;	}	public VU360UserService getVu360UserService() {		return vu360UserService;	}	public void setVu360UserService(VU360UserService vu360UserService) {		this.vu360UserService = vu360UserService;	}	public LearnerService getLearnerService() {		return learnerService;	}	public void setLearnerService(LearnerService learnerService) {		this.learnerService = learnerService;	}}