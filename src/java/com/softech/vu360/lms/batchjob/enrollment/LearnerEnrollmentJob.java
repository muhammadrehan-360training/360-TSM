package com.softech.vu360.lms.batchjob.enrollment;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.softech.vu360.util.Brander;

/**
 * This class represents a learner enrollment job.  This is the 
 * only way to create enrollments in the system as the system
 * has been optimized to by-pass the internal database caching
 * mechanism to make generating bulk enrollments very fast.
 * 
 * @author jason
 *
 */
public class LearnerEnrollmentJob implements Serializable {

	private static final long serialVersionUID = 765558503663163299L;
	public static final String STATUS_NEW = "new";
	public static final String STATUS_PROCESSING = "processing";
	public static final String STATUS_COMPLETED_NOERROR = "completed_no_errors";
	public static final String STATUS_COMPLETED_ERROR = "completed_with_errors";
	
	public static final String NO_ERROR_INFO = "no_error_info";
	public static final String ERROR_NOSEATS = "no_available_seats";

	private Long id = null;
	private List<Long> learnerIds = new ArrayList<Long>();
	private List<Long> courseIds = new ArrayList<Long>();
	private Date enrollmentStartDate = null;
	private Date enrollmentEndDate = null;
	private Date requiredCompletionDate = null;
	private Map<Long, Date> startDates = null;
	private Map<Long, Date> endDates = null;
	private Map<Long, Date> requiredCompletionDates = null;
	private Map<Long,Long> synchronousClasses = null;
	private Map<Long, Long> customerEntitlements = null;
	private Long vu360UserId = null;
	private boolean usingSingleDates = true;
	private boolean notifyLearners = false;
	private boolean notifyUser = false;
	private boolean ignoreDuplicates = true;
	private boolean selfEnrollmentJob = false;
	private Brander brander = null;
	private String status = STATUS_NEW;
	private String errorCode = NO_ERROR_INFO;
	private String errorInformation = null;
	private int totalNumberEnrollmentsCreated = 0;
	
	
	/**
	 * use this method to leverage the start/end date per
	 * course method of enrolling learners
	 * 
	 * @param startDate
	 * @param endDate
	 */
	public void addDatesForCourse(Long courseId, Date startDate, Date endDate, Date aRequiredCompletionDate) {
		// first check to ensure that we have been properly called
		if ( courseId == null ) {
			throw new IllegalArgumentException("illegal arugment - courseId is null");
		}
		else if ( startDate == null ) {
			throw new IllegalArgumentException("illegal arugment - startDate is null");
		}
		else if ( endDate == null ) {
			throw new IllegalArgumentException("illegal arugment - endDate is null");
		}
		
		// now check to see if we have a startDate map already
		if ( this.startDates == null ) {
			startDates = new HashMap<Long, Date>();
		}
		// add the start date
		startDates.put(courseId, startDate);
		
		// check to see if we have the endDate map yet
		if ( this.endDates == null ) {
			endDates = new HashMap<Long, Date>();
		}
		// add the end date
		endDates.put(courseId, endDate);
		
		// check to see if a required completion date has been set
		if ( aRequiredCompletionDate != null ) {
			// check to see if we have the requiredCompletionDates map yet
			if ( this.requiredCompletionDates == null ) {
				requiredCompletionDates = new HashMap<Long, Date>();
			}
			// add the required completion date
			requiredCompletionDates.put(courseId, aRequiredCompletionDate);
		}
		
		// now make sure that everyone knows this has course
		// specific dates
		this.usingSingleDates = false;
	}
	
	/**
	 * use this method to leverage the single/master start date and
	 * end date for all enrollments generated by this job
	 * 
	 * @param startDate
	 * @param endDate
	 */
	public void setSingleStartAndEndDate(Date startDate, Date endDate) {
		// first check to ensure that we have been properly called
		if ( startDate == null ) {
			throw new IllegalArgumentException("illegal argument - startDate is null");
		}
		else if ( endDate == null ) {
			throw new IllegalArgumentException("illegal argument - endDate is null");
		}
		
		// now set the dates
		this.enrollmentStartDate = startDate;
		this.enrollmentEndDate = endDate;
		
		// now make sure that everyone knows this job does not
		// have course specific dates
		this.usingSingleDates = true;
	}
	
	/**
	 * use this method to instruct which synchronous class to enroll
	 * learners into when a synchronous course is chosen as an enrollment
	 * 
	 * @param courseId
	 * @param synchClassId
	 */
	public void setSynchronousClassForCourse(Long courseId, Long synchClassId) {
		// first check to ensure that we have been properly called
		if ( courseId == null ) {
			throw new IllegalArgumentException("illegal argument - courseId is null");
		}
		else if ( synchClassId == null ) {
			throw new IllegalArgumentException("illegal argument = synchClassId is null");
		}
		
		// now check to see if we have any synchronous courses
		if ( this.synchronousClasses == null ) {
			synchronousClasses = new HashMap<Long, Long>();
		}
		
		// now set the synchronous courses
		synchronousClasses.put(courseId, synchClassId);
	}
	
	/**
	 * add a customer entitlement to be used for this enrollJob
	 * 
	 * @param courseId
	 * @param customerEntitlementId
	 */
	public void setCustomerEntitlementFor(Long courseId, Long customerEntitlementId) {
		// first check to ensure that we have been properly called
		if ( courseId == null ) {
			throw new IllegalArgumentException("illegal argument - courseId is null");
		}
		else if ( customerEntitlementId == null ) {
			throw new IllegalArgumentException("illegal argument = customerEntitlementId is null");
		}
		
		// now check to see if we have any customerEntitlements
		if ( this.customerEntitlements == null ) {
			customerEntitlements = new HashMap<Long, Long>();
		}
		
		// now set the customerEntitlement
		customerEntitlements.put(courseId, customerEntitlementId);
	}
	
	/**
	 * get the synchronous class Id for a course
	 * 
	 * @param courseId
	 * @return
	 */
	public Long getSynchronousCourseIdFor(Long courseId) {
		if ( this.synchronousClasses != null && !this.synchronousClasses.isEmpty() ) {
			if ( synchronousClasses.containsKey(courseId) ) {
				return synchronousClasses.get(courseId);
			}
		}
		return null;
	}
	
	/**
	 * get the customerEntitlement class Id for a course
	 * 
	 * @param courseId
	 * @return
	 */
	public Long getCustomerEntitlementFor(Long courseId) {
		if ( this.customerEntitlements != null && !this.customerEntitlements.isEmpty() ) {
			if ( this.customerEntitlements.containsKey(courseId) ) {
				return customerEntitlements.get(courseId);
			}
		}
		return null;
	}
	
	/**
	 * lookup the end date for a course
	 * 
	 * @param courseId
	 * @return
	 */
	public Date getEnrollmentEndDateFor(Long courseId) {
		if ( this.isUsingSingleDates() ) {
			return this.enrollmentEndDate;
		}
		if ( this.endDates.containsKey(courseId) ) {
			return endDates.get(courseId);
		}
		return null;
	}
	
	/**
	 * lookup the required completion date for a course
	 * 
	 * @param courseId
	 * @return
	 */
	public Date getRequiredCompleationDateFor(Long courseId) {
		if ( this.isUsingSingleDates() ) {
			return this.requiredCompletionDate;
		}
		if ( this.requiredCompletionDates.containsKey(courseId) ) {
			return requiredCompletionDates.get(courseId);
		}
		return null;
	}
	
	/**
	 * lookup the start date for a course
	 * 
	 * @param courseId
	 * @return
	 */
	public Date getEnrollmentStartDateFor(Long courseId) {
		if ( this.isUsingSingleDates() ) {
			return this.enrollmentStartDate;
		}
		if ( this.startDates.containsKey(courseId) ) {
			return startDates.get(courseId);
		}
		return null;
	}
	

	/**
	 * check to see that this job is properly setup
	 * 
	 * @return boolean
	 */
	public boolean isValid() {
		if ( this.courseIds == null || this.courseIds.isEmpty() ) {
			return false;
		}
		if ( this.learnerIds == null || this.learnerIds.isEmpty() ) {
			return false;
		}
		if ( this.isUsingSingleDates() && (this.enrollmentEndDate == null || this.enrollmentStartDate == null) ) {
			return false;
		}
		if ( !this.isUsingSingleDates() && (this.startDates == null || this.startDates.isEmpty()) ) {
			return false;
		}
		if ( !this.isUsingSingleDates() && (this.endDates == null || this.endDates.isEmpty()) ) {
			return false;
		}
		if ( !this.isUsingSingleDates() && (this.startDates.size() != this.endDates.size()) ) {
			return false;
		}

		return true;
	}
	/**
	 * @return the usingSingleDates
	 */
	public boolean isUsingSingleDates() {
		return usingSingleDates;
	}
	/**
	 * @return the id
	 */
	public Long getId() {
		return id;
	}
	/**
	 * @param id the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}
	/**
	 * @return the learnerIds
	 */
	public List<Long> getLearnerIds() {
		return learnerIds;
	}
	/**
	 * @param learnerIds the learnerIds to set
	 */
	public void setLearnerIds(List<Long> learnerIds) {
		this.learnerIds = learnerIds;
	}
	/**
	 * @return the courseIds
	 */
	public List<Long> getCourseIds() {
		return courseIds;
	}
	/**
	 * @param courseIds the courseIds to set
	 */
	public void setCourseIds(List<Long> courseIds) {
		this.courseIds = courseIds;
	}
	/**
	 * @return the enrollmentStartDate
	 */
	public Date getEnrollmentStartDate() {
		return enrollmentStartDate;
	}
	/**
	 * @return the enrollmentEndDate
	 */
	public Date getEnrollmentEndDate() {
		return enrollmentEndDate;
	}
	/**
	 * @return the startDates
	 */
	public Map<Long, Date> getStartDates() {
		return startDates;
	}
	/**
	 * @return the endDates
	 */
	public Map<Long, Date> getEndDates() {
		return endDates;
	}
	/**
	 * @return the synchronousClasses
	 */
	public Map<Long, Long> getSynchronousClasses() {
		return synchronousClasses;
	}
	/**
	 * @return the vu360UserId
	 */
	public Long getVu360UserId() {
		return vu360UserId;
	}
	/**
	 * @param vu360UserId the vu360UserId to set
	 */
	public void setVu360UserId(Long vu360UserId) {
		this.vu360UserId = vu360UserId;
	}
	/**
	 * @return the brander
	 */
	public Brander getBrander() {
		return brander;
	}
	/**
	 * @param brander the brander to set
	 */
	public void setBrander(Brander brander) {
		this.brander = brander;
	}

	/**
	 * @return the notifyLearners
	 */
	public boolean isNotifyLearners() {
		return notifyLearners;
	}

	/**
	 * @param notifyLearners the notifyLearners to set
	 */
	public void setNotifyLearners(boolean notifyLearners) {
		this.notifyLearners = notifyLearners;
	}

	/**
	 * @return the notifyUser
	 */
	public boolean isNotifyUser() {
		return notifyUser;
	}

	/**
	 * @param notifyUser the notifyUser to set
	 */
	public void setNotifyUser(boolean notifyUser) {
		this.notifyUser = notifyUser;
	}

	/**
	 * @return the status
	 */
	public String getStatus() {
		return status;
	}

	/**
	 * @param status the status to set
	 */
	public void setStatus(String status) {
		this.status = status;
	}

	/**
	 * @return the errorCode
	 */
	public String getErrorCode() {
		return errorCode;
	}

	/**
	 * @param errorCode the errorCode to set
	 */
	public void setErrorCode(String errorCode) {
		this.errorCode = errorCode;
	}

	/**
	 * @return the errorInformation
	 */
	public String getErrorInformation() {
		return errorInformation;
	}

	/**
	 * @param errorInformation the errorInformation to set
	 */
	public void setErrorInformation(String errorInformation) {
		this.errorInformation = errorInformation;
	}

	/**
	 * @return the ignoreDuplicates
	 */
	public boolean isIgnoreDuplicates() {
		return ignoreDuplicates;
	}

	/**
	 * @param ignoreDuplicates the ignoreDuplicates to set
	 */
	public void setIgnoreDuplicates(boolean ignoreDuplicates) {
		this.ignoreDuplicates = ignoreDuplicates;
	}

	/**
	 * @return the selfEnrollmentJob
	 */
	public boolean isSelfEnrollmentJob() {
		return selfEnrollmentJob;
	}

	/**
	 * @param selfEnrollmentJob the selfEnrollmentJob to set
	 */
	public void setSelfEnrollmentJob(boolean selfEnrollmentJob) {
		this.selfEnrollmentJob = selfEnrollmentJob;
	}

	/**
	 * @return the totalNumberEnrollmentsCreated
	 */
	public int getTotalNumberEnrollmentsCreated() {
		return totalNumberEnrollmentsCreated;
	}

	/**
	 * @param totalNumberEnrollmentsCreated the totalNumberEnrollmentsCreated to set
	 */
	public void setTotalNumberEnrollmentsCreated(int totalNumberEnrollmentsCreated) {
		this.totalNumberEnrollmentsCreated = totalNumberEnrollmentsCreated;
	}
}
